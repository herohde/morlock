
//
// Morlock chess engine
// 
// Copyright (C) 2000-2021
// Henning Korsholm Rohde <herohde@seekerror.org>
//

### 12. mar 2021; Version 0.85 ###
  - Completed TUROCHAMP.
  - Bad blunder: "2b2rk1/r1Pp2p1/ppn1p3/q3N1Bp/3P4/2NQR2P/PPP2PP1/R5K1 b - - 4 18", because UCI quit after 1s. Fixed.

    I0312 23:42:01.932727   32269 iterative.go:72] Searched --b--rk-/r-Pp--p-/ppn-p---/q---N-Bp/---P----/--NQR--P/PPP--PP-/R-----K- -(-): depth=1 score=102.95 nodes=190 time=17.949389ms pv=Qa5*e5
    I0312 23:42:03.191043   32269 iterative.go:72] Searched --b--rk-/r-Pp--p-/ppn-p---/q---N-Bp/---P----/--NQR--P/PPP--PP-/R-----K- -(-): depth=2 score=99.61 nodes=34659 time=1.25824247s pv=Nc6-b4 Qd3-e4

### 10. mar 2021; Version 0.84 ###
  - Engine working with material, PVS and UCI integration.
  - Move generation passes perft.

TODO:
  - Pure material plays aimlessly in the endgame. Add Mate in X to eval?
  - Add simple move ordering? MVV-LVA or just promo/captures first.
  - Otherwise, focus on Turochamp heuristics

### 20. feb 2021; Version 0.83 ###
  - Revived project! (yet again)
  - Plan to use Go as C has proven too cumbersome to sustain enthusiasm.

--------------------------------------------------------------------------

### 7. sep 2015; Version 0.82 ###
  - FEN is logged after every move.
  - Moved to cmake and CLion editor (on mac)
  - Played a losing game and morlock mated with a promition to knight. Nice.
  - Noticed: "sh: aplay: command not found" in stderr. Not engine, just xboard.
  - Again saw 3-fold rep problem. No claim of illegal move, but it was far ahead. TT problem?

    Game and log: games/herohde/20150907_rep.pgn

TODO:
  - PV should print full PV if mate detected (not just depth 1, if cache hit for mate in 4)
  - We should add (light-weight) counters, log2 profilers and 2D profilers w/ registration
  - Continue ...


ASIDE: The mac book pro profile much slower than the linux machine, despite similar processor (i7).
I suspect it's almost due to the imprecise (and slower?) clock:

1441698470694511000 [TRACE] engine_end_game (/Users/herohde/code/c/morlock/source/engine/engine.c:360): rtprofile[name=movegen, count=1210800, sum=2926822000, avg=2417, bucket/
 low = 0
 [0, 1000) = 21
 [1000, 2000) = 2
 [2000, 3000) = 766397
 [3000, 4000) = 417505
 high = 26875
/]
1441698470694530000 [TRACE] engine_end_game (/Users/herohde/code/c/morlock/source/engine/engine.c:361): rtprofile[name=pushmove, count=11295979, sum=22799444000, avg=2018, bucket/
 low = 0
 [0, 1000) = 244
 [1000, 2000) = 547940
 [2000, 3000) = 10270550
 [3000, 4000) = 371159
 high = 106086
/]
1441698470694539000 [TRACE] engine_end_game (/Users/herohde/code/c/morlock/source/engine/engine.c:362): rtprofile[name=popmove, count=11295961, sum=22192734000, avg=1964, bucket/
 low = 0
 [0, 1000) = 244
 [1000, 2000) = 1050465
 [2000, 3000) = 9847928
 [3000, 4000) = 301717
 high = 95607
/]
1441698470694548000 [TRACE] engine_end_game (/Users/herohde/code/c/morlock/source/engine/engine.c:363): rtprofile[name=pushmove/bad, count=1678222, sum=3408519000, avg=2031, bucket/
 low = 0
 [0, 1000) = 46
 [1000, 2000) = 82056
 [2000, 3000) = 1509074
 [3000, 4000) = 69267
 high = 17779
/]
1441698470694561000 [TRACE] engine_end_game (/Users/herohde/code/c/morlock/source/engine/engine.c:367): rtprofile[name=hashtable_read, count=478681, sum=998344000, avg=2085, bucket/
 low = 0
 [0, 1000) = 10
 [1000, 2000) = 10780
 [2000, 3000) = 429675
 [3000, 4000) = 33000
 [4000, 5000) = 3929
 [5000, 6000) = 319
 [6000, 7000) = 23
 [7000, 8000) = 9
 [8000, 9000) = 16
 [9000, 10000) = 25
 high = 895
/]
1441698470694573000 [TRACE] engine_end_game (/Users/herohde/code/c/morlock/source/engine/engine.c:368): rtprofile[name=hashtable_badread, count=1030409, sum=2222645000, avg=2157, bucket/
 low = 0
 [0, 1000) = 13
 [1000, 2000) = 5437
 [2000, 3000) = 905255
 [3000, 4000) = 96233
 [4000, 5000) = 19231
 [5000, 6000) = 1587
 [6000, 7000) = 240
 [7000, 8000) = 178
 [8000, 9000) = 79
 [9000, 10000) = 97
 high = 2059
/]
1441698470694588000 [TRACE] engine_end_game (/Users/herohde/code/c/morlock/source/engine/engine.c:369): rtprofile[name=hashtable_write, count=983739, sum=1957725000, avg=1990, bucket/
 low = 0
 [0, 1000) = 18
 [1000, 2000) = 74709
 [2000, 3000) = 867560
 [3000, 4000) = 32426
 [4000, 5000) = 7115
 [5000, 6000) = 136
 [6000, 7000) = 42
 [7000, 8000) = 19
 [8000, 9000) = 41
 [9000, 10000) = 40
 high = 1633
/]
1441698470694599000 [TRACE] engine_end_game (/Users/herohde/code/c/morlock/source/engine/engine.c:370): rtprofile[name=hashtable_badwrite, count=0, sum=0, avg=0, bucket/
 low = 0
 [0, 1000) = 0
 [1000, 2000) = 0
 [2000, 3000) = 0
 [3000, 4000) = 0
 [4000, 5000) = 0
 [5000, 6000) = 0
 [6000, 7000) = 0
 [7000, 8000) = 0
 [8000, 9000) = 0
 [9000, 10000) = 0
 high = 0
/]

--------------------------------------------------------------------------

### 9. nov 2013; Version 0.81.8 ###
   - 3-fold repetition problem: morlock bestmove'd into a 3 fold rep and claimed illegal move. It
      was ahead, so draw should not be bestmove.

      Game and log: games/herohde/20131009_rep_bug.pgn

 TODO:
   - store fen in log

### 9. jun 2013; Version 0.81.7 ###
   - Near mate crash (player was winning):

       HEROHDE1:morlock herohde$ tail morlock.log 
       1370823219352045000 [TRACE] search_main (./source/search/search_core.c:74): search iteration, search_id=85, depth='11', result='result[bestmove=move[h7g7 (3184), promo=-, score=0], status=Undecided, score=8000 (6974202254991168)]'
       1370823219352072000 [INFO ] xbo_ponder (./source/protocol/xboard.c:135):  << '11 800 95 1036735 h7g7 e8c8 g7f6 c8c6 f6e7 c6g6 e7d7 g6g7 d7d8 g7a7 d8c8'
       1370823225447705000 [TRACE] search_main (./source/search/search_core.c:74): search iteration, search_id=85, depth='12', result='result[bestmove=move[h7g7 (3184), promo=-, score=0], status=Undecided, score=8000 (6974202254991168)]'
       1370823225447731000 [INFO ] xbo_ponder (./source/protocol/xboard.c:135):  << '12 800 705 9429832 h7g7 e8c8 g7f6 c8c6 f6e7 c6g6 e7d7 g6g7 d7d8 g7a7 d8c8 g1g2'

       HEROHDE1:morlock herohde$ tail xboard.debug 
       1227865 <first : 10 800 0 10 h7g7 e8c8 g7f6 c8c6 f6e7 c6c7 a7a6 c7b7 e7d8 b7b5
       1228816 <first : 11 800 95 1036735 h7g7 e8c8 g7f6 c8c6 f6e7 c6g6 e7d7 g6g7 d7d8 g7a7 d8c8
       1234911 <first : 12 800 705 9429832 h7g7 e8c8 g7f6 c8c6 f6e7 c6g6 e7d7 g6g7 d7d8 g7a7 d8c8 g1g2
       1239576 <first : assert failed (./source/board/board.c:79): pieces[KING] & mask
       GameEnds(26, Error: first chess program (./bin/morlock   ) exited unexpectedly, 2)
       1242429 >first : result 0-1 {Error: first chess program (./bin/morlock   ) exited unexpectedly}
       1242430 >first : quit

   - found bug: we didn't check for king in is_attacked. Moving kings together was the cause.
   - added board validation

### 19. dec 2012; Version 0.81.6 ###
   - partial locality structure reorganization

### 26. nov 2012; Version 0.81.5 ###
   - added replacement policy to transposition table, changed badwrite to mean writes of
     entries where the score of the new one is worse than the old.
   - found bug in handle_search: we ignored ponder search for terminal positions instead
     of sending the result
   - moved node to a separate file (partly)
   - added full principal variation printout using hashtable

TODO:
  - blend in MVV/LVA static move ordering
  - quiescience search
  - more search performance and minimality benchmarks (+ re-run searcht)
  - correctness scaffold
  - ICS support

  - think about configuration and how to tune ...


### 4. nov 2012; Version 0.81.4 ###
   - added history heuristic. improved play dramastically -- see later herohde/table games.
   - moved repetition to a separate file (partly)

### 21. oct 2012; Version 0.81.3 ###
   - added simple transposition tables and integrated them into alpha-beta. tuning is TBD

   - unofficial performance test close to the starting position:
     1350870676297265549 [INFO ] hashtable_make (./source/search/hashtable.c:39): allocated hashtable, entries=5592405, request_mem=128MB, physical_mem=11892MB

         hashtable_read,     count=26492299, sum=2078700476, avg=78
	 hashtable_badread,  count=58041150, sum=6900393606, avg=118
	 hashtable_write,    count=7692476,  sum=359820056,  avg=46
         hashtable_badwrite, count=45497713, sum=1573491223, avg=34

     the high number of badwrite is a little surprising, even with a mere 128MB hashtable. This means
     that the replacement policy of the hashtable should be considered more carefully.

   - I didn't observe any collisions with the _HASHTABLE_EXACT setting. It seems 64bit hash is not too bad.

   - searcht w/ alphabeta vs. alphabeta_table was much closer than I thought it would be.
     Lack of move ordering?

 TODO:
   - history heuristic w/ bestmove hook


### 15. oct 2012; Version 0.81.2 ###
   - unofficial performance test close to the starting position.
         movegen,  count=14453176,  sum=3469124268, avg=240
         pushmove, count=138109601, sum=8441056414, avg=61
         popmove,  count=138109600, sum=2736054480, avg=19

   - added more logging - they showed that we don't stop searching correctly when checkmating. fixed it.
     	 1350534890811882603 [TRACE] search_core_start_async (./source/engine/../search/search_core.h:91): start search_id='186', is_active='0', is_idle='1'
     	 1350534890812055407 [INFO ] xbo_ponder (./source/protocol/xboard.c:125):  << '1 -300 0 21 c8b8'
     	 1350534890812111717 [INFO ] xbo_ponder (./source/protocol/xboard.c:125):  << '2 -99999 0 63 d5a5'
     	 1350534890812120790 [TRACE] search_core_stop_async (./source/search/search_core.h:100): stop search_id='186', is_active='1', is_idle='0'
     	 1350534890812139009 [INFO ] timectrl_stop_search (./source/engine/timectrl.c:165): timectrl stop, search_id=186
     	 1350534890812152652 [TRACE] search_core_start_async (./source/engine/../search/search_core.h:91): start search_id='187', is_active='0', is_idle='0'
     	 1350534890812157859 [INFO ] xbo_move (./source/protocol/xboard.c:86):  << 'move d5a5'
     	 1350534890812166559 [INFO ] xbo_ponder (./source/protocol/xboard.c:125):  << '1 -99999 0 0 '
     	 1350534890812173329 [INFO ] timectrl_stop_search (./source/engine/timectrl.c:165): timectrl stop, search_id=186
     	 1350534890812177401 [TRACE] engine_handle_search (./source/engine/engine.c:101): ignoring ponder search at depth '1' (maxdepth='9')
     	 [..]
     	 1350534890812285202 [INFO ] xbo_ponder (./source/protocol/xboard.c:125):  << '1 -99999 0 0 '
         1350534890812290584 [INFO ] timectrl_stop_search (./source/engine/timectrl.c:165): timectrl stop, search_id=186
         1350534890812294128 [TRACE] engine_handle_search (./source/engine/engine.c:101): ignoring ponder search at depth '1' (maxdepth='9')
         1350534890812297919 [INFO ] xbo_ponder (./source/protocol/xboard.c:125):  << '1 -99999 0 0 '
         1350534890812303351 [INFO ] timectrl_stop_search (./source/engine/timectrl.c:165): timectrl stop, search_id=186
         1350534890812306881 [TRACE] engine_handle_search (./source/engine/engine.c:101): ignoring ponder search at depth '1' (maxdepth='9')
         1350534890812315303 [INFO ] xbo_ponder (./source/protocol/xboard.c:125):  << '1 -99999 0 0 '
         1350534890812321392 [INFO ] timectrl_stop_search (./source/engine/timectrl.c:165): timectrl stop, search_id=186
         [...]

### 15. oct 2012; Version 0.81.2 ###
   - added basic logging system
 
TODO:
   - check whether CLOCK_MONOTONIC is substantially faster for profiling

### 4. oct 2012; Version 0.81.1 ###
   - made position look more like FEN directly: moved status out of metastatus, added turn
   - made timectrl less naive

### 22. sep 2012; Version 0.81 ###
   - added searcht test tool to compare and track search results
   - fixed bug in alpha-beta: if no move exceeded cutoff, it was treated as terminal

### 16. sep 2012; Version 0.80.8 ###
   - added preliminary timectrl
   - added thread helpers (and made it compile on mac)

 ISSUE:
   - discovered that the material advantage plays much worse then usual
     the eval is often 0.00 pawns, which cannot be explained by lack of quiescence
     likely reason is incorrect draw conditions (colliding repetition?)

### 9. sep 2012; Version 0.80.7 ###
   - played with setting thread affinity for search_cores to prevent migration.
   - discovered that my system does not have numa, so it will be somewhat pointless to
     attempt to optimize for it for now:

     	     herohde@HEROHDE6 ~ $ numactl --hardware
	     available: 1 nodes (0-0)
	     node 0 cpus: 0 1 2 3 4 5 6 7
	     node 0 size: 12136 MB
	     node 0 free: 9684 MB
	     node distances:
	     node   0 
	       0:  10 

     later, however, perhaps local copy of board static data is worthwhile.

   - verified that repetition detection is correct wrt side/castling/ep metastatus
     See: https://en.wikipedia.org/wiki/Threefold_repetition

 TODO:
   - good logging (encrypted using pub key?)
   - automatic thread/mem mgmt (simplistic, but ideally respecting xboard settings)
   - time mgmt to avoid hitting "Move Now" in xb all the time (simplistic too)
   - hashtables

### 8. sep 2012; Version 0.80.6 ###
   - fixed hang by dropping last_search_id and have a simple is_idle flag

### 4. sep 2012; Version 0.80.5 ###
   - added zobrist hashing and repetition detection (hash-based only)
   - on mac, in XBoard the engine hangs upon mating move. stdout problem?

### 21. aug 2012; Version 0.80.5 ###
   - fixed some bugs in search stop condition/terminal handling
     test case: setboard 7k/RR6/8/8/8/8/8/7K b - - 0 1
   - made it play nicely in xboard again

### 18. aug 2012; Version 0.80.4 ###
   - added perft script to automate these tests and store performance results

### 15. aug 2012; Version 0.80.3 ###
   - added perft, found&fixed movegen bugs wrt en passent!
   - passes all 4 positions on: http://chessprogramming.wikispaces.com/Perft+Results
   - added compile switch for profiling (and calling rtclock): _BOARD_PROFILE. Profiling cost dominates movegen/pushmove/popmove cost!

   - W/ _BOARD_PROFILE profiling:
   
     herohde@HEROHDE6 ~/code/c/morlock $ ./bin/perft 
     perft,rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1,1,20,0
     perft,rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1,2,400,0
     perft,rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1,3,8902,3
     perft,rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1,4,197281,35
     perft,rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1,5,4865609,831
     perft,rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1,6,119060324,20648
     herohde@HEROHDE6 ~/code/c/morlock $ ./bin/perft -d 5 -f "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1"
     perft,r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1,1,48,0
     perft,r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1,2,2039,0
     perft,r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1,3,97862,19
     perft,r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1,4,4085603,717
     perft,r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1,5,193690690,33801
     herohde@HEROHDE6 ~/code/c/morlock $ ./bin/perft -d 7 -f "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1"
     perft,8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1,1,14,0
     perft,8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1,2,191,0
     perft,8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1,3,2812,1
     perft,8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1,4,43238,16
     perft,8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1,5,674624,128
     perft,8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1,6,11030083,2165
     perft,8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1,7,178633661,33690
     herohde@HEROHDE6 ~/code/c/morlock $ ./bin/perft -d 6 -f "r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1"
     perft,r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1,1,6,0
     perft,r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1,2,264,0
     perft,r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1,3,9467,4
     perft,r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1,4,422333,80
     perft,r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1,5,15833292,2934
     perft,r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1,6,706045033,129636

   - W/O _BOARD_PROFILE profiling:

     herohde@HEROHDE6 ~/code/c/morlock $ ./bin/perft 
     perft,rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1,1,20,0
     perft,rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1,2,400,0
     perft,rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1,3,8902,1
     perft,rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1,4,197281,17
     perft,rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1,5,4865609,273
     perft,rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1,6,119060324,6745
     herohde@HEROHDE6 ~/code/c/morlock $ ./bin/perft -d 5 -f "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1"
     perft,r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1,1,48,0
     perft,r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1,2,2039,0
     perft,r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1,3,97862,8
     perft,r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1,4,4085603,263
     perft,r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1,5,193690690,12084
     herohde@HEROHDE6 ~/code/c/morlock $ ./bin/perft -d 7 -f "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1"
     perft,8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1,1,14,0
     perft,8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1,2,191,0
     perft,8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1,3,2812,0
     perft,8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1,4,43238,7
     perft,8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1,5,674624,46
     perft,8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1,6,11030083,766
     perft,8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1,7,178633661,11282
     herohde@HEROHDE6 ~/code/c/morlock $ ./bin/perft -d 6 -f "r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1"
     perft,r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1,1,6,0
     perft,r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1,2,264,0
     perft,r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1,3,9467,1
     perft,r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1,4,422333,35
     perft,r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1,5,15833292,1100
     perft,r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1,6,706045033,48277


### 1. aug 2012; Version 0.80.2 ###
   - added search_core, stub minimax (as a perft)
   - added partial engine <-> search interaction
   - fixed bugs, noticed that non-pinned core thread indeed bounces around
   - perf is worse for movegen. Needs investigation: just due to real search?

       movegen avg=276, pushmove avg=55, popmove avg=18

 TODO: setup perft scaffold for tracking performance. Excel good?
       complete search interaction to make it playable again 
       add alpha-beta and material eval


### 7. jul 2012; Version 0.80.1 ###
   - Added xboard features (move now and retract move) and tested
   - Morlock plays nicely now in xboard! (given no search and eval :)

 TODO: material and alpha-beta search (the baseline)


### 4. jul 2012; Version 0.80.0 ###
   - reworked the engine api
   - fixed two bugs: e/p not respected and move to string is mirrored:

   herohde@HEROHDE6 ~/code/c/morlock $ ./bin/morlock -d
   morlock chess engine v0.80.20704.0
   copyright (c) 2000-2012 henning korsholm rohde
   xboard
    >> 'xboard'
    new
    position[board=/
    rnbqkbnr
    pppppppp
    --------
    --------
    --------
    --------
    PPPPPPPP
    RNBQKBNR
    /, metastatus={side=WHITE, ep=n/a, noprogress=0} (481)]
    usermove e2e3
    position[board=/
    rnbqkbnr
    pppppppp
    --------
    --------
    --------
    ---P----
    PPP-PPPP
    RNBQKBNR
    /, metastatus={side=BLACK, ep=n/a, noprogress=0} (480)]
    position[board=/
    rnbqkb-r
    pppppppp
    -------n
    --------
    --------
    ---P----
    PPP-PPPP
    RNBQKBNR
    /, metastatus={side=WHITE, ep=n/a, noprogress=1} (33249)]
    move b8a6
    usermove c1e3
    Illegal move: c1e3
    usermove d2d4
    position[board=/
    rnbqkb-r
    pppppppp
    -------n
    --------
    ----P---
    ---P----
    PPP--PPP
    RNBQKBNR
    /, metastatus={side=BLACK, ep=n/a, noprogress=0} (480)]
    position[board=/
    rnbqkbr-
    pppppppp
    -------n
    --------
    ----P---
    ---P----
    PPP--PPP
    RNBQKBNR
    /, metastatus={side=WHITE, ep=n/a, noprogress=1} (33121)]
    move a8b8
    usermove c1d2
    position[board=/
    rnbqkbr-
    pppppppp
    -------n
    --------
    ----P---
    ---P----
    PPP-BPPP
    RNBQK-NR
    /, metastatus={side=BLACK, ep=n/a, noprogress=2} (65888)]
    position[board=/
    rnbqkb-r
    pppppppp
    -------n
    --------
    ----P---
    ---P----
    PPP-BPPP
    RNBQK-NR
    /, metastatus={side=WHITE, ep=n/a, noprogress=3} (98657)]
    move b8a8
    quit
     ** time(ns) spent: start=1341462878331011934, end=1341463208471424120, diff=330140412186 ns
     herohde@HEROHDE6 ~/code/c/morlock $


### 20. jun 2012; Version 0.79.5 ###
   - make it compile on mac. MacBook Air is substantially slower than the Dell XPS 8300.
      Mac: movegen avg=5422, pushmove avg=5169, popmove avg=5040

### 3. jun 2012; Version 0.79.4 ###
   - completed movegen - added pushmove/popmove.
   - found that storing aggr/rot board in node_t is better (and simpler)

      New2: movegen avg=174, pushmove avg=60, popmove avg=18
      New:  movegen avg=176, pushmove avg=47, popmove avg=19
      Old:  movegen avg=180, pushmove avg=47, popmove avg=143

     pushmove does not seem much not affected for the wild gain of popmove.
   - however, it's not clear why we lost 13ns avg by "cleanup" (noise or bug?)

 TODO: wire up engine/xboard to movegen


   Experiment 3: store color/all/rotX in node (cleaned up code)
   -------------
   
   herohde@HEROHDE6 ~/code/c/morlock $ ./bin/morlock
   xboard
   position[board=/
   rnbqkbnr
   pppppppp
   --------
   --------
   --------
   --------
   PPPPPPPP
   RNBQKBNR
   /, metastatus={side=WHITE, ep=n/a, noprogress=0} (481)]
    moveheap: 20
    move: move[a2a4 (1999), promo=0, score=0]
    move: move[b2b4 (1934), promo=0, score=0]
    move: move[c2c4 (1869), promo=0, score=0]
    move: move[d2d4 (1804), promo=0, score=0]
    move: move[e2e4 (1739), promo=0, score=0]
    move: move[f2f4 (1674), promo=0, score=0]
    move: move[g2g4 (1609), promo=0, score=0]
    move: move[h2h4 (1544), promo=0, score=0]
    move: move[a2a3 (1487), promo=0, score=0]
    move: move[b1a3 (1478), promo=0, score=0]
    move: move[b2b3 (1422), promo=0, score=0]
    move: move[c2c3 (1357), promo=0, score=0]
    move: move[b1c3 (1350), promo=0, score=0]
    move: move[d2d3 (1292), promo=0, score=0]
    move: move[e2e3 (1227), promo=0, score=0]
    move: move[f2f3 (1162), promo=0, score=0]
    move: move[g1f3 (1153), promo=0, score=0]
    move: move[g2g3 (1097), promo=0, score=0]
    move: move[h2h3 (1032), promo=0, score=0]
    move: move[g1h3 (1025), promo=0, score=0]
   rtprofile[name=movegen, count=42001, sum=7324580, avg=174, bucket/
    low = 0
    [20, 40) = 0
    [40, 60) = 0
    [60, 80) = 0
    [80, 100) = 0
    [100, 120) = 0
    [120, 140) = 0
    [140, 160) = 0
    [160, 180) = 39600
    [180, 200) = 1810
    [200, 220) = 4
    [220, 240) = 1
    [240, 260) = 4
    [260, 280) = 0
    [280, 300) = 0
    [300, 320) = 0
    [320, 340) = 0
    [340, 360) = 0
    [360, 380) = 0
    [380, 400) = 359
    [400, 420) = 186
    [420, 440) = 6
    [440, 460) = 4
    [460, 480) = 5
    [480, 500) = 1
    [500, 520) = 0
    [520, 540) = 1
    [540, 560) = 2
    [560, 580) = 3
    [580, 600) = 4
    [600, 620) = 1
    [620, 640) = 0
    [640, 660) = 0
    [660, 680) = 1
    [680, 700) = 0
    [700, 720) = 1
    [720, 740) = 0
    [740, 760) = 0
    [760, 780) = 0
    [780, 800) = 0
    [800, 820) = 0
    [820, 840) = 0
    [840, 860) = 0
    [860, 880) = 0
    [880, 900) = 0
    [900, 920) = 0
    [920, 940) = 0
    [940, 960) = 0
    [960, 980) = 0
    [980, 1000) = 0
    high = 8
   /]
   rtprofile[name=pushmove, count=686000, sum=41507635, avg=60, bucket/
    low = 0
    [20, 40) = 0
    [40, 60) = 466449
    [60, 80) = 210157
    [80, 100) = 17
    [100, 120) = 9
    [120, 140) = 6910
    [140, 160) = 2153
    [160, 180) = 151
    [180, 200) = 22
    [200, 220) = 23
    [220, 240) = 17
    [240, 260) = 7
    [260, 280) = 11
    [280, 300) = 3
    [300, 320) = 1
    [320, 340) = 1
    [340, 360) = 0
    [360, 380) = 1
    [380, 400) = 0
    [400, 420) = 1
    [420, 440) = 1
    [440, 460) = 2
    [460, 480) = 1
    [480, 500) = 0
    [500, 520) = 0
    [520, 540) = 0
    [540, 560) = 0
    [560, 580) = 0
    [580, 600) = 0
    [600, 620) = 0
    [620, 640) = 0
    [640, 660) = 0
    [660, 680) = 0
    [680, 700) = 0
    [700, 720) = 0
    [720, 740) = 0
    [740, 760) = 0
    [760, 780) = 1
    [780, 800) = 0
    [800, 820) = 0
    [820, 840) = 0
    [840, 860) = 1
    [860, 880) = 0
    [880, 900) = 3
    [900, 920) = 2
    [920, 940) = 1
    [940, 960) = 0
    [960, 980) = 0
    [980, 1000) = 0
    high = 55
   /]
   rtprofile[name=popmove, count=686000, sum=13017220, avg=18, bucket/
    low = 0
    [10, 15) = 0
    [15, 20) = 560576
    [20, 25) = 116060
    [25, 30) = 45
    [30, 35) = 2
    [35, 40) = 1
    [40, 45) = 7164
    [45, 50) = 2112
    [50, 55) = 1
    [55, 60) = 0
    [60, 65) = 1
    [65, 70) = 0
    [70, 75) = 0
    [75, 80) = 1
    [80, 85) = 1
    [85, 90) = 0
    [90, 95) = 0
    [95, 100) = 1
    high = 35
   /]
   
   
   Experiment 2: store color/all/rotX in node
   -------------
   
   herohde@HEROHDE6 ~/code/c/morlock $ ./bin/morlock -d
   morlock chess engine v0.79.20517.0
   copyright (c) 2000-2012 henning korsholm rohde
   xboard
    >> 'xboard'
   position[board=/
   rnbqkbnr
   pppppppp
   --------
   --------
   --------
   --------
   PPPPPPPP
   RNBQKBNR
   /, metastatus={side=WHITE, ep=n/a, noprogress=0} (481)]
    moveheap: 20
    move: move[a2a4 (1999), promo=0, score=0]
    move: move[b2b4 (1934), promo=0, score=0]
    move: move[c2c4 (1869), promo=0, score=0]
    move: move[d2d4 (1804), promo=0, score=0]
    move: move[e2e4 (1739), promo=0, score=0]
    move: move[f2f4 (1674), promo=0, score=0]
    move: move[g2g4 (1609), promo=0, score=0]
    move: move[h2h4 (1544), promo=0, score=0]
    move: move[a2a3 (1487), promo=0, score=0]
    move: move[b1a3 (1478), promo=0, score=0]
    move: move[b2b3 (1422), promo=0, score=0]
    move: move[c2c3 (1357), promo=0, score=0]
    move: move[b1c3 (1350), promo=0, score=0]
    move: move[d2d3 (1292), promo=0, score=0]
    move: move[e2e3 (1227), promo=0, score=0]
    move: move[f2f3 (1162), promo=0, score=0]
    move: move[g1f3 (1153), promo=0, score=0]
    move: move[g2g3 (1097), promo=0, score=0]
    move: move[h2h3 (1032), promo=0, score=0]
    move: move[g1h3 (1025), promo=0, score=0]
   rtprofile[name=movegen, count=42001, sum=7403062, avg=176, bucket/
    low = 0
    [20, 40) = 0
    [40, 60) = 0
    [60, 80) = 0
    [80, 100) = 0
    [100, 120) = 0
    [120, 140) = 0
    [140, 160) = 0
    [160, 180) = 38085
    [180, 200) = 3136
    [200, 220) = 51
    [220, 240) = 10
    [240, 260) = 15
    [260, 280) = 4
    [280, 300) = 10
    [300, 320) = 8
    [320, 340) = 0
    [340, 360) = 1
    [360, 380) = 0
    [380, 400) = 258
    [400, 420) = 366
    [420, 440) = 28
    [440, 460) = 2
    [460, 480) = 9
    [480, 500) = 1
    [500, 520) = 1
    [520, 540) = 1
    [540, 560) = 0
    [560, 580) = 1
    [580, 600) = 0
    [600, 620) = 0
    [620, 640) = 1
    [640, 660) = 0
    [660, 680) = 0
    [680, 700) = 0
    [700, 720) = 1
    [720, 740) = 1
    [740, 760) = 0
    [760, 780) = 0
    [780, 800) = 0
    [800, 820) = 0
    [820, 840) = 0
    [840, 860) = 0
    [860, 880) = 0
    [880, 900) = 0
    [900, 920) = 0
    [920, 940) = 0
    [940, 960) = 0
    [960, 980) = 0
    [980, 1000) = 0
    high = 11
   /]
   rtprofile[name=pushmove, count=686000, sum=32519991, avg=47, bucket/
    low = 0
    [20, 40) = 0
    [40, 60) = 673510
    [60, 80) = 1277
    [80, 100) = 191
    [100, 120) = 10469
    [120, 140) = 384
    [140, 160) = 45
    [160, 180) = 15
    [180, 200) = 14
    [200, 220) = 14
    [220, 240) = 20
    [240, 260) = 3
    [260, 280) = 2
    [280, 300) = 2
    [300, 320) = 1
    [320, 340) = 0
    [340, 360) = 1
    [360, 380) = 0
    [380, 400) = 1
    [400, 420) = 2
    [420, 440) = 2
    [440, 460) = 0
    [460, 480) = 0
    [480, 500) = 0
    [500, 520) = 0
    [520, 540) = 1
    [540, 560) = 0
    [560, 580) = 0
    [580, 600) = 0
    [600, 620) = 0
    [620, 640) = 0
    [640, 660) = 0
    [660, 680) = 0
    [680, 700) = 0
    [700, 720) = 0
    [720, 740) = 0
    [740, 760) = 0
    [760, 780) = 1
    [780, 800) = 0
    [800, 820) = 1
    [820, 840) = 0
    [840, 860) = 1
    [860, 880) = 0
    [880, 900) = 1
    [900, 920) = 1
    [920, 940) = 0
    [940, 960) = 0
    [960, 980) = 0
    [980, 1000) = 0
    high = 41
   /]
   rtprofile[name=popmove, count=686000, sum=13516136, avg=19, bucket/
    low = 511552
    [20, 40) = 163518
    [40, 60) = 10893
    [60, 80) = 6
    [80, 100) = 2
    [100, 120) = 1
    [120, 140) = 1
    [140, 160) = 1
    [160, 180) = 3
    [180, 200) = 0
    [200, 220) = 0
    [220, 240) = 1
    [240, 260) = 0
    [260, 280) = 0
    [280, 300) = 0
    [300, 320) = 0
    [320, 340) = 1
    [340, 360) = 0
    [360, 380) = 1
    [380, 400) = 0
    [400, 420) = 1
    [420, 440) = 0
    [440, 460) = 0
    [460, 480) = 0
    [480, 500) = 0
    high = 19
   /]
   
   
   Experiment 1: store color/all/rotX in board:
   -------------
   
   herohde@HEROHDE6 ~/code/c/morlock $ ./bin/morlock -d
   morlock chess engine v0.79.20517.0
   copyright (c) 2000-2012 henning korsholm rohde
   xboard
    >> 'xboard'
   position[board=/
   rnbqkbnr
   pppppppp
   --------
   --------
   --------
   --------
   PPPPPPPP
   RNBQKBNR
   /, metastatus={side=WHITE, ep=n/a, noprogress=0} (481)]
    moveheap: 20
    move: move[a2a4 (1999), promo=0, score=0]
    move: move[b2b4 (1934), promo=0, score=0]
    move: move[c2c4 (1869), promo=0, score=0]
    move: move[d2d4 (1804), promo=0, score=0]
    move: move[e2e4 (1739), promo=0, score=0]
    move: move[f2f4 (1674), promo=0, score=0]
    move: move[g2g4 (1609), promo=0, score=0]
    move: move[h2h4 (1544), promo=0, score=0]
    move: move[a2a3 (1487), promo=0, score=0]
    move: move[b1a3 (1478), promo=0, score=0]
    move: move[b2b3 (1422), promo=0, score=0]
    move: move[c2c3 (1357), promo=0, score=0]
    move: move[b1c3 (1350), promo=0, score=0]
    move: move[d2d3 (1292), promo=0, score=0]
    move: move[e2e3 (1227), promo=0, score=0]
    move: move[f2f3 (1162), promo=0, score=0]
    move: move[g1f3 (1153), promo=0, score=0]
    move: move[g2g3 (1097), promo=0, score=0]
    move: move[h2h3 (1032), promo=0, score=0]
    move: move[g1h3 (1025), promo=0, score=0]
   rtprofile[name=movegen, count=42001, sum=7566230, avg=180, bucket/
    low = 0
    [20, 40) = 0
    [40, 60) = 0
    [60, 80) = 0
    [80, 100) = 0
    [100, 120) = 0
    [120, 140) = 0
    [140, 160) = 0
    [160, 180) = 34033
    [180, 200) = 6191
    [200, 220) = 860
    [220, 240) = 105
    [240, 260) = 16
    [260, 280) = 21
    [280, 300) = 24
    [300, 320) = 34
    [320, 340) = 56
    [340, 360) = 38
    [360, 380) = 7
    [380, 400) = 22
    [400, 420) = 476
    [420, 440) = 25
    [440, 460) = 46
    [460, 480) = 12
    [480, 500) = 7
    [500, 520) = 8
    [520, 540) = 4
    [540, 560) = 4
    [560, 580) = 0
    [580, 600) = 2
    [600, 620) = 2
    [620, 640) = 2
    [640, 660) = 0
    [660, 680) = 0
    [680, 700) = 0
    [700, 720) = 0
    [720, 740) = 0
    [740, 760) = 0
    [760, 780) = 0
    [780, 800) = 0
    [800, 820) = 0
    [820, 840) = 0
    [840, 860) = 0
    [860, 880) = 0
    [880, 900) = 1
    [900, 920) = 0
    [920, 940) = 0
    [940, 960) = 0
    [960, 980) = 0
    [980, 1000) = 0
    high = 5
   /]
   rtprofile[name=pushmove, count=764997, sum=36151035, avg=47, bucket/
    low = 0
    [20, 40) = 0
    [40, 60) = 749845
    [60, 80) = 2101
    [80, 100) = 2102
    [100, 120) = 10601
    [120, 140) = 149
    [140, 160) = 21
    [160, 180) = 57
    [180, 200) = 23
    [200, 220) = 21
    [220, 240) = 17
    [240, 260) = 6
    [260, 280) = 4
    [280, 300) = 4
    [300, 320) = 0
    [320, 340) = 0
    [340, 360) = 1
    [360, 380) = 0
    [380, 400) = 1
    [400, 420) = 1
    [420, 440) = 1
    [440, 460) = 0
    [460, 480) = 1
    [480, 500) = 1
    [500, 520) = 0
    [520, 540) = 0
    [540, 560) = 0
    [560, 580) = 0
    [580, 600) = 0
    [600, 620) = 0
    [620, 640) = 0
    [640, 660) = 0
    [660, 680) = 1
    [680, 700) = 0
    [700, 720) = 0
    [720, 740) = 0
    [740, 760) = 0
    [760, 780) = 0
    [780, 800) = 0
    [800, 820) = 0
    [820, 840) = 1
    [840, 860) = 0
    [860, 880) = 0
    [880, 900) = 0
    [900, 920) = 0
    [920, 940) = 0
    [940, 960) = 1
    [960, 980) = 0
    [980, 1000) = 0
    high = 37
   /]
   rtprofile[name=popmove, count=764997, sum=109466816, avg=143, bucket/
    low = 0
    [20, 40) = 0
    [40, 60) = 0
    [60, 80) = 0
    [80, 100) = 0
    [100, 120) = 0
    [120, 140) = 540717
    [140, 160) = 210821
    [160, 180) = 1431
    [180, 200) = 991
    [200, 220) = 11
    [220, 240) = 13
    [240, 260) = 9
    [260, 280) = 1
    [280, 300) = 1
    [300, 320) = 630
    [320, 340) = 10134
    [340, 360) = 83
    [360, 380) = 2
    [380, 400) = 0
    [400, 420) = 0
    [420, 440) = 3
    [440, 460) = 0
    [460, 480) = 3
    [480, 500) = 6
    high = 141
   /]
   quit
    ** time(ns) spent: start=1338762463275672279, end=1338762628777438566, diff=165501766287 ns  
   
### 20. may 2012; Version 0.79.3 ###
   - added pseudo-legal move generation
   - added real-time bucket profiler

 TODO: complete move generation, pushmove/popmove

### 17. may 2012; Version 0.79.2 ###
   - worked on porting move generation over, added moveheap
   - material: http://home.comcast.net/~danheisman/Articles/evaluation_of_material_imbalance.htm

 TODO: get move generation working, still ...

### 14. may 2012; Version 0.79.1 ###
   - Added position, board stub, ..
   - Approach: minimal move, minimal bitboard position, move/unmove board, single position hash
   - Spent time learning about memory structure, notably cache structure, from
     the paper: Ulrich Drepper: "What every programmer should know about memory"
   - Looked at 'pahole' memory aligment tool:

     struct _position_t {
        bitboard_t                 _white[6];            /*     0    48 */
        bitboard_t                 _black[6];            /*    48    48 */
        /* --- cacheline 1 boundary (64 bytes) was 32 bytes ago --- */
        metastatus_t               _metastatus;          /*    96     4 */

        /* size: 104, cachelines: 2, members: 3 */
        /* padding: 4 */
        /* last cacheline: 40 bytes */
     };
     struct _node_t {
        position_t                 _position;            /*     0   104 */
        /* --- cacheline 1 boundary (64 bytes) was 40 bytes ago --- */
        move_t                     _lastmove;            /*   104     4 */

        /* XXX 4 bytes hole, try to pack */

        position_t *               previous;             /*   112     8 */

        /* size: 128, cachelines: 2, members: 3 */
        /* sum members: 116, holes: 1, sum holes: 4 */
        /* padding: 8 */
     };
     ...

 TODO: get move generation working ...

### 8. may 2012; Version 0.79 ###
   - Added move, xboard (simplified), game constants, clock, ..
   - Spent some time looking at the generated x86-64 assembly output
   - Intel Core i7 has some ultra-fast bit instructions (popcnt)

 TODO: get something compiling.

### 28. april 2012; Version 0.78 ###
   - Revived project! (again)
   - Plan to use linux mint and c99
   - Focus on testing, logging and measurement (= quantitive approach).

 TODO: get something compiling.

--------------------------------------------------------------------------

### 11. may 2008; Version 0.77 ###
   - The DGT board arrived!
   - Added FEN parser. Made it accept arbitrary positions (neede by DGT).
   - Templatized HashTable to take different keys. On 32bit it was
     wasteful to always use 64bit for small things.
   - Found bugs related to mate_in_x and 50-move rule. It smells like
     a hashtable issue.
   
### 26. april 2008; Version 0.76 ###
   - Many perf and quality improvements
   - Implemented xboard. It's easier and gives us the result back!
   - Implemented material advantage. Playing it in Arena.
   - HashTables and Search are at a half-decent stage.
   - Tried generating moves stricty legal, but it's too expensive.
     However, added a IsLegal is tell without move (and memcpy).
   - Apparently, the compiler ignores 'inline. Do LTCG instead.
 
### 6. april 2008; Version 0.75 ###
   - Nice and easy moving code to the new code base.
   - Stub engine is running some UCI in Arena.
   - UCI is poorly documented and has some surprises.
   - Focus on robust architecture, sound engineering, optimizable code.
   - Version stamp and information in resources. Unicode everywhere.

 TODO: Continue.

### 7. march 2008; Version 0.74 ###
   - Revived project!
   - Plan to move it to Windows, C++, and xBoard+UCI. Drop EA angle.
   - Debugging should become a lot easier with VS2008.

 TODO: Get something compiling.

--------------------------------------------------------------------------

### 3. june 2003; Version 0.73 ###
   - found bug in ea.c: ea_cleanup could remove _all_ features
       (if all incomming weights were below EA_EPSILON) 
   - generating two baselines:
       hense: as below
       wb:    as below except ea_pm_default = 0.3

 TODO: explore ea
       introduce new material ?
       elitism via ELO-ratings ?

### 27. may 2003; Version 0.72 ###
   - generating baseline
        #define EA_EPSILON 0.001
        #define ea_pc_default 0.3
        #define ea_pm_default 0.8
        #define ea_pm_geo_default 0.1
        #define ea_geoweight_default 0.2
   - found problem: core dumped
      #0  0x0805c376 in nn_clone (n=0x81554f0) at engine/evaluation/neuralnet.c:511
          511         c->thresholds[i] = n->thresholds[i];

 TODO: check results next week .. 
       maybe vary parameters above, check gene size
       find errors

### 10. apr 2003; Version 0.72 ###
   - worked on including metastatus in hash functions
   - just made first castling rights update.     

 TODO: continue.

###  1. apr 2003; Version 0.72 ###
   - fixed minor things (prevented history heur. overflow)
   - decided to include metastatus in hash functions

 TODO: do it.

### 24. mar 2003; Version 0.71 ###
   - bugs in morlock: choose suboptmal move in endgame
   - missed obvious checkmate.
   - hashtables are maybe to blame.

  TODO: limit depth.
        experiment with hash tables.

### 18. mar 2003; Version 0.71 ###
   - found bug!
   - eval_unmove'd with the wrong move in search_cleanup
   - oh, happy days!

  TODO: fetch Barry White!

### 4. mar 2003; Version 0.70 ###
   - disabled hashtables (they are not to blame).
   - reproduced crazy evaluation:
     the _stopping_ of the seach is the cause.
     if the search reached max_depth it is ok.
   - it appears that threads are somehow to blame.
  
  TODO: figure out what is going on (sync problems?)

### 25. feb 2003; Version 0.70 ###
  - fixed a bug in tdleaf. (draw didn't init result)
  - created simplified search in tmp-search (no threads - 1 ply)  
  - crazy results sometimes displayed (maybe hashtable conflicts??)

  TODO: experiment with simplified search (kill hashtables)
        wanted: simple deterministic search!

### 10. feb 2003; Version 0.69 ###
  - made the 'material_map' debug tool
  - made 'mkplot' which plots the graph of single-feature genomes.
  - preliminary results indicate that learning is reasonable.

 TODO: simplify 'search'
       check learningrate.

### 10. jan 2003; Version 0.69 ###
  - Fixed nn_gradient.
  - Played some games -- something is not right.
  - outputvalues do not seem to be correct.
 
### 7. jan 2003; Version 0.69 ###
 - Bug: old transposition table evaluations remained after learning.
 - Fixed by: flushes table (only) after learning. 

 - Recalculated gradient.

 TODO: Fix nn_gradient.

### 18. dec 2002; Version 0.69 ###
 Thought carefully about neural nets.
   - beginning to add substiantial comments.

 TODO: reread TDLeaf(lambda) article.
       think hard about neural nets.
       esp. about their (mathematical) gradients.

### 3. dec 2002; Version 0.69 ###
 Looked carefully at the code.
   - learning not correct.
   - confusion about what function we use in the output layer.
     Some code assumed sigmoid; others linear. And the code for these
     functions did not compute exactly what we thought.
   - nn_gradient does not use threshold. vs. nn_eval does.

   TODO: think hard about neural nets.

### 26. nov 2002; Version 0.68 ###
 Back to basics. Morlock has been revived!

--------------------------------------------------------------------------

### 12. dec 2001; Version 0.68 ###
 Found that TDLeaf(lambda)-article is wrong;
 fixed by using Sutton's original article.
 Back on track!

### 11. dec 2001; Version 0.67 ###
 Worked on technical problems. (Disc Quota/Sync problems)
 Mysterious bugs..

### 10. dec 2001; Version 0.66 ###
 Worked on technical problems. (Disc Quota/Sync problems)

### 9. dec 2001; Version 0.66 ###
 Worked on technical problems. (Disc Quota/Sync problems)

### 8. dec 2001; Version 0.66 ###
 Worked on technical problems. (Disc Quota/Sync problems)

### 7. dec 2001; Version 0.65 ###
 Debug info:
mystique:~...morlock% battle genepool/gene22.e genepool/gene91.e res game
1 searching
move g1f3 : -2095999 (1153)
  Cap: 0, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
0 searching
move h7h5 : -2095056 (2096)
  Cap: 0, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
1 searching
move d2d4 : -2095348 (1804)
  Cap: 0, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
0 searching
move e7e6 : -2094349 (2803)
  Cap: 0, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
1 searching
move d1d3 : -2095868 (1284)
  Cap: 0, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
0 searching
move e8e7 : -2093829 (3323)
  Cap: 0, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
1 searching
move f3e5 : 184551634 (2258)
  Cap: 0, Pro: 0
  EPC: 0, Score: 88
black moved
result 0
0 searching
move b7b6 : -2094154 (2998)
  Cap: 0, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
1 searching
move e5g6 : 92277347 (2659)
  Cap: 0, Pro: 0
  EPC: 0, Score: 44
black moved
result 0
0 searching
move f7g6 : -2078094 (2674)
  Cap: 4, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
1 searching
move f2f3 : -2095990 (1162)
  Cap: 0, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
0 searching
move c7c5 : 125831541 (2421)
  Cap: 0, Pro: 0
  EPC: 0, Score: 60
black moved
result 0
1 searching
move f3f4 : -2095470 (1682)
  Cap: 0, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
0 searching
move c8b7 : 41946557 (3517)
  Cap: 0, Pro: 0
  EPC: 0, Score: 20
black moved
result 0
1 searching
move a2a4 : 100665295 (1999)
  Cap: 0, Pro: 0
  EPC: 0, Score: 48
black moved
result 0
0 searching
move b7g2 : -2088330 (630)
  Cap: 2, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
1 searching
move b1c3 : 205522246 (1350)
  Cap: 0, Pro: 0
  EPC: 0, Score: 98
black moved
result 0
0 searching
move c5c4 : -2095259 (1893)
  Cap: 0, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
1 searching
move d3g3 : -2096044 (1108)
  Cap: 0, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
0 searching
move g8f6 : 8391353 (2745)
  Cap: 0, Pro: 0
  EPC: 0, Score: 4
black moved
result 0
1 searching
move e1f2 : 83886723 (643)
  Cap: 0, Pro: 0
  EPC: 0, Score: 40
black moved
result 0
0 searching
move f6e4 : -2095382 (1770)
  Cap: 0, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
1 searching
move c3e4 : 104871637 (1749)
  Cap: 3, Pro: 0
  EPC: 0, Score: 50
black moved
result 0
0 searching
move b8a6 : -2094082 (3070)
  Cap: 0, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
1 searching
move g3g5 : 92276817 (2129)
  Cap: 0, Pro: 0
  EPC: 0, Score: 44
black moved
result 0
0 searching
move e7f7 : -2093901 (3251)
  Cap: 0, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
1 searching
move g5g6 : -2090399 (2657)
  Cap: 1, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
0 searching
move f7e7 : -2093838 (3314)
  Cap: 0, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
1 searching
move f1g2 : 234902082 (578)
  Cap: 5, Pro: 0
  EPC: 0, Score: 112
black moved
result 0
0 searching
move h8h6 : -2094536 (2616)
  Cap: 0, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
1 searching
move g6g7 : -2089879 (3177)
  Cap: 1, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
0 searching
move f8g7 : -2052998 (3194)
  Cap: 10, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
1 searching
move c1e3 : 310379717 (1221)
  Cap: 0, Pro: 0
  EPC: 0, Score: 148
black moved
result 0
0 searching
move h6g6 : -2094488 (2664)
  Cap: 0, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
1 searching
move e4g3 : 192939099 (1115)
  Cap: 0, Pro: 0
  EPC: 0, Score: 92
black moved
result 0
0 searching
move a6c5 : 524290415 (2415)
  Cap: 0, Pro: 0
  EPC: 0, Score: 250
black moved
result 0
1 searching
move f4f5 : -2094950 (2202)
  Cap: 0, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
0 searching
move e7e8 : 1874857715 (3827)
  Cap: 0, Pro: 0
  EPC: 0, Score: 894
black moved
result 0
1 searching
move a4a5 : -2094625 (2527)
  Cap: 0, Pro: 0
  EPC: 0, Score: 2047
black moved
result 0
0 searching
move e7e8 : 1874857715 (3827)
  Cap: 0, Pro: 0
  EPC: 0, Score: 894
BOARD: empty error 51 (bitboard)!
turn 1
r--q----
p--p--b-
-p--p-r-
P-n--P-p
--pP----
----B-N-
-PP-PKBP
R------R
 allpieces:
x--xx---
x--xx-x-
-x--x-x-
x-x--x-x
--xx----
----x-x-
-xx-xxxx
x------x
 
 black:
x--x----
x--xx-x-
-x--x-x-
--x----x
--x-----
--------
--------
--------
 
 white:
--------
--------
--------
x----x--
---x----
----x-x-
-xx-xxxx
x------x
 
 WKING:
--------
--------
--------
--------
--------
--------
-----x--
--------
 
 BKING:
----x---
--------
--------
--------
--------
--------
--------
--------
 
 WQUEEN:
--------
--------
--------
--------
--------
--------
--------
--------
 
 BQUEEN:
---x----
--------
--------
--------
--------
--------
--------
--------
 
 WROOK:
--------
--------
--------
--------
--------
--------
--------
x------x
 
 BROOK:
x-------
--------
------x-
--------
--------
--------
--------
--------
 
 WKNIGHT:
--------
--------
--------
--------
--------
------x-
--------
--------
 
 BKNIGHT:
--------
--------
--------
--x-----
--------
--------
--------
--------
 
 
 WBISHOP:
--------
--------
--------
--------
--------
----x---
------x-
--------
 
 BBISHOP:
--------
------x-
--------
--------
--------
--------
--------
--------
 
 WPAWN:
--------
--------
--------
x----x--
---x----
--------
-xx-x--x
--------
 
 BPAWN:
--------
x--x----
-x--x---
-------x
--x-----
--------
--------
--------
 
Segmentation fault (core dumped)
mystique:~...morlock%

Problem was too early-search_cleanup: if stopsearch during 1-ply-search.

### late nov/early dec ###
 Worked on system problems.

### 17. nov 2001; Version 0.64 ###
 Worked on search (found hard-to-find-bug (syncronization of bestmove))

### 15. nov 2001; Version 0.63 ###
 Problems with bash.
 Gave presentation to the TiEC-class.

### 14. nov 2001; Version 0.62 ###
 Made presentation.

### 13. nov 2001; Version 0.61 ###
 Reworked search and tp.

### 7. nov 2001; Version 0.60 ###
 Testing the transposition table.

poseidon:~...morlock% ./morlock
table_make: size 2048, mem 16384
table_make: size 2097152, mem 16777216
xboard
easy
e2e3
rnbqkbnr
pppppppp
--------
--------
--------
----P---
PPPP-PPP
RNBQKBNR

...................................................!..!..!..!..!..!..!..!.!..!.!
..............................!.!.!..!.!..!.!.!.!!......................!.......
...............!................................................................
.............................................!..................!......!...!....
..............!.!.!...!.!..!..!.!.!..!.!.!.!..!..!..!.!.!.!.!.!.!.!..!.!.!..!!..
...............!.....!..!..................!!...................!!........
.......!.................!!..............!!..............!!....................!
..............!..................!!.............!!.................!!...........
........!..................................................!.........!..........
............................!.......!...............!..........!!.........!.....
........!..................!!........!.................!..............!..!......
.......................!..............!!....!.............!!....!.............!!
!.............................!.............................!..!.!.!..!...!...!.
!..!..!...!.!.!.!.!.!.!...!.!...!!..............................!...............
...............!..!.....!....!..........!....................!...!............!!
.............................!.............................!!...................
.......!..........................!!.!...!.!!.!.!..!!.!.!..!.!..!..!.!..!.
!!!.............................................................................
....!..........................!...................................!............
.....................!.........................!........................!.......
.................!........................!........................!............
.............!....................!...................!.....................!...
...............!.........................!...........................!..........
.....!................!...............!....................!..............
...!......................!..............!..............!..................!....
....!..............!...........!.................!..........!................!...
.....!......!....!............!....!.....!.............!....!............!.!!....
..........................!.!..!.!.!.!..!..!...!.!..!.!..!..!.!..!..!.!.!..!..!!.
............................!.!.!..!.!..!.!..!..!.!..!.!.!!
move b7b6

rnbqkbnr
p-pppppp
-p------
--------
--------
----P---
PPPP-PPP
RNBQKBNR


d2d4
rnbqkbnr
p-pppppp
-p------
--------
---P----
----P---
PPP--PPP
RNBQKBNR

!...................!!...............!..!.!.!..!.!.!..!..!..!..!.!.!..!..!.!.!..!.
.!.......!!.......................!....x..................!......!.....!..........
!.!.............!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!.!..!.!.!..!.!............!.!.!.!.!
.!!...................!...................!.!...!.!.!........!.!.!.!.!..!.!..!.!.!
.!.!.!.!.!.!.!..!.!.!.!.!..!.!.!.!.!x!!..................!...................!....
.......................!....................!..x.................!!...............
..!...................!...............!................!..x....................!..
................!.................!!................!x................!!..........
.!...........!!.............!!.................!..................!!..............
....!...................!!.............!!...........!!......!.........!!.....!....
...!!..............!..................!........!!......!!..............!..........
.........!!.!......!!!...................................!.x!..!.!.....!..........
........................!.!..................................!.!.!.!.!..!.!.!.!.!.
.!.!.!.!.!.!!................................!..!..!.!..!.....!...................
............!.!.!..!..!..!.!.!.!.!..!.!.!.!.!.!!...............................!!.
...............................!.!...............................!.!...!.!.x......
......................!..............................!....!.......................
........!.........................!.......x..................!....................
........!..!............................!..!.!.!..!.!.!.....!.!..!.!............x.
........!..........................!!..........................!!.................
!!..............................!!..........................!!....................
....!!.................................!..........................................
...!......................!!.....................!!.....................!!........
..............!!.................!!.....................!...............
.............!!..............!!..............!!..............!....................
..........!...............!!............!!.............!!............!............
............!!.........!!
move d7d6

rnbqkbnr
p-p-pppp
-p-p----
--------
---P----
----P---
PPP--PPP
RNBQKBNR

quit 
poseidon:~...morlock% 


poseidon:~...morlock% ./morlock
table_make: size 2048, mem 16384
table_make: size 16384, mem 131072
xboard
easy
e2e3
rnbqkbnr
pppppppp
--------
--------
--------
----P---
PPPP-PPP
RNBQKBNR

...................................................!..............
................!.....!......!..............................!.....
......................!....!.!....!.......!....!..................
............!...........!.............!......!.!..!.!...........!.
...................x........!!.....................!..............
.....!......................!.!.!.!.!.............................
.....x....................!.................!...............!.....
.............!.!.!.!.!.!.!.!.!.!.!.!.!.!.!....................!.!.
!.!.!.!.!.!.!.!.!.!.!!.................!...............!.....x....
........!..!..!..!..!.!.!..!x.!..................!..!.x!..!..!....
!....!.!.!..!.!..!.!.!..!..!.!..!..!!..................!..........
......!!..................!........x...!!.....................!...
.........!!...............!............!!...........x...!.........
.x..!.................
.!.!.!.!.!...................!x..............!............x.!!....
..............!..x.!....................!x..................x!....
..x..!......!!........!!......................!!x..............x..
x!............!...x......!!................!...!..................
....x...!.................!....x...........!!.......!!.......!....
..!!!.......x.x.........x.x......!x.........x...........x.x...!...
!.......x....................!.!.!.!.!.!.!.!.!.!.!.!.!.!x!.!.!!...
....xx....................!..............x...........x..!...!.!...
......!..!.........!.......!..!...!..!..!...!xx..!...!....!..x.!!.
.....x........x......x
......!........x..x.x.......x.......!......xx...!.x.!...........x.
x!.........x.....!..!...x............!........x.......!.......!....
....x......!......!....!..!x.....xx..!............x..x.......x....x
..x!...xx..x.xx!...x.....!!.......x.x............x....!........xx..
......x.........!..........x.x.....x...x..x.!..!............!!.x...
....x........x!..xx....x.......x......!.......................!....
.................x.!!...x....x..................!..................
........x!x..........x.....xx.......!..........xx.............x!...
..x.................x!...x...............x.x..x!x....x......x...x.
.x...........!!.x...xx...x.x.x....x.!.x............x...xx.!........
..x........x......!!x...............x...x..x....x.x!..............x
...x...x............x........!x........xx.....x...........!x.....xx
...........x.......x.......!..............xxx..x!......x..xx......x.
.x!!xx.xx.xxxxxxxxxxxx!...x...............!!.x............xxx.!.....
....x........x!x....x..........xxx.x.x...........xx!move b8c6

r-bqkbnr
pppppppp
--n-----
--------
--------
----P---
PPPP-PPP
RNBQKBNR

d2d4
r-bqkbnr
pppppppp
--n-----
--------
---P----
----P---
PPP--PPP
RNBQKBNR

......................x...x......x.................x..!..!.!x.!..!.!x.
!.!.!x.!.!x.!.x!..!..!.!.!...!.!..!.!.!!.....................!.......
..x.x....x..x.!....................x..!..!..!.......................!
..!..!.!..!......!....!.!x!.!..!.!x!.!.!..!..!..!..!xx!.!..!x!x!.!..!.
!.x!.!!............x.........!..........x.......x...!!x............x.
..!!x.......x......xx..x!......x......x......!.x....x.......x........
!x.............x..!x........x..x.......!!.....xx...xxx.....!.x.x.x....
.xx.x.....!x.x.............!xx.x.....x....x.!....x...x.........x...x..
..x.x.....x...x.x......!.....................x!!..........xx......x!!.
..........!..x.......x..!!.x.........xx......x...............xx!......
..........!!.x.......x..x...!x............!!...................x!.....
x..........x......!!........!...........!..x...............!.x..xx....
.........x....!x...........!!.........!.x.....x!.....xx...x...!.....x.
..x.!..........x.x.x..x.......!............x..x......x.....xx..!..x...
...x........!...x.......xx...xx.!!x........x.x.....x.x!x..x...!.......
!!...xx..!!!....x.......x.........x...x.x..x!x...x.xx.......x......x..
...xx..!.!.......x....x........x..xx.x...!x!x!x!x!.!.!.!.!.!.!.!.!.!.!
.!.!.!.!!....x.......x............xx.....!.......x.......x....x.......
....!x!.......x...x...xx........x.....!.!.!.!.!.!.!.!.!.!!.......x....
......x.x......x..x.x!.x..x..x......x..x.x......xx.....!....x.x.....x.
x.x......xx.x...!.!.!.....!.!.!.!!...xxx..x..x........x....xxx....!...
xxx.x.......x....x...........!....x..x.......x.x......xx...xx!!..x....
x..xxx......x......x!.........x.x.......x..x...x!.......x............x
x....!!...x..x..............x.........!.....x........xx.....x......xxx
!.x...x!.x...xx.x..x.x....x...x..x....x!...x..!.!xx.x.x!.!xx..!x!.!.x.
.!.!...x!....!x..x!xxx!.!....!.!.!.!x............................x!..x
..........xx...x.........x!....xx.x..x..x.x..x....x.x...x..x........x.x
..x........x..!x...x......x...x.....x....x..!!x.xxxxx..x.x..x.xxx..x..x
!xx..xx.x.x...xx.xxx.xx....!xx..x...xxx..x.x..xxx..xx.x....x.xx..x.x...
xx.xx.......x....x.........xx....!.x..x..x..x......xxx..!x..x........x.
.x..x.x..!..!xx.x.xx.x.......x..xxx...!..!..!.xx...xx.x...xx.....x..xx.
...xxxxx.xx..x.....x.x.............x.xxx.....x.!xxx.........x.x.xx...!.
x....x....x....x...x.!x..x............xx...x!!move d7d5

r-bqkbnr
ppp-pppp
--n-----
---p----
---P----
----P---
PPP--PPP
RNBQKBNR

quit
poseidon:~...morlock% 

problems with board:

[snip]
board_move: (12592917): "c3d4"
xboard_unmove: (12592917) "c3d4"
board_move: (12592341): "c3e3"
.board_unmove: (12592341) "c3e3"
board_move: (12592021): "c3b2"
board_unmove: (0) "h1h1"
BOARD: empty error 0 (bitboard)!
turn 1
rnb-kbnr
[snip]
 


### 5. nov 2001; Version 0.59 ###
 Worked on pthreads'n'pondering.

### 4. nov 2001; Version 0.58 ###
 Worked on pthreads'n'pondering.
 Worked on genetic operations in the ea.

### 3. nov 2001; Version 0.57 ###
 Worked on TDLeaf.
 Found hard-hard-bug (hash error) in board_move(b)!
 Worked on genetic operations in the ea.

### 30. oct 2001; Version 0.56 ###
 Worked on genetic operations in the ea.
 Worked on TDLeaf and fixed bugs in engine.

### 24. oct 2001; Version 0.55 ###
 Worked on genetic operations in the ea.

### 21. oct 2001; Version 0.54 ###
 Worked on genetic operations in the ea.
 Recoded neuralnet.

### 17. oct 2001; Version 0.53 ###
 Worked on genetic operations in the ea.
 Worked on parallelism.

### 16. oct 2001; Version 0.52 ###
 Decided to focus on origin monitoring.
 Recoded neuralnet.
 Worked on genetic operations in the ea.

### 9. oct 2001; Version 0.51 ###
 Discussed geometry in evaluations -added ea/.

### 7. oct 2001; Version 0.50 ###
 Massive file rearrangement - SOM's are out.
 Project back as project in "Topics in Evolutionary Computation"
 together with Wouter Boomsma <wb@daimi.au.dk>.

--------------------------------------------------------------------------

### 28. aug 2001; Version 0.47d ###
 Finished and handed in the rapport. 
 Made the webpage.

### 27. aug 2001; Version 0.47c ###
 Worked on the rapport.

### 26. aug 2001; Version 0.47b ###
 Worked on the rapport. A rerun of the battle made 
 no changes in the outcome.

### 25. aug 2001; Version 0.47 ###
 Worked on features in the rapport.
 The result of the battle:
  
   horse07:~...morlock% head -2 genepool/battleground/*
   ==> genepool/battleground/no0.e <==
   morlock engine gene (0.957)
   nosom
   
   ==> genepool/battleground/no1.e <==
   morlock engine gene (0.0)
   std
   
   ==> genepool/battleground/no2.e <==
   morlock engine gene (1.0)
   nosom
   
   ==> genepool/battleground/no3.e <==
   morlock engine gene (0.12121)
   puresom
   
   ==> genepool/battleground/no4.e <==
   morlock engine gene (0.0)
   std
   
   ==> genepool/battleground/no5.e <==
   morlock engine gene (3.0)
   puresom
   horse07:~...morlock%
   
 The trained nosom wins!

### 24. aug 2001; Version 0.46 ###
 Deleted all training-engines: wrong learningrate! (!@#%!#@$)
 Began retraining. Worked on the rapport.

### 23. aug 2001; Version 0.45 ###
 Organized the trainingeffort: 18 proc on 9 machines!
 Fixed some bugs in the new gene-code.
 Working on GMT-illustrations:

  horse02:~...rapport% ../morlock_mgr --koh-gmt ../brain/Botvinnik.k test-Bot.xyz
  horse02:~...rapport% ~/gmt/GMT3.4/bin/xyz2grd test-Bot.xyz -Gtest-Bot.grd -I1/1 -R0/99/0/99
  (2-d)
  horse02:~...rapport% ~/gmt/GMT3.4/bin/grdimage test-Bot.grd -Ctest.cpt -B10 -c1 -Jx0.1 -R0/99/0/99 > test.ps
  (3-d mesh)
  horse02:~...rapport% ~/gmt/GMT3.4/bin/grdview test-Bot.grd -Ctest.cpt -B10 -E80/30 -c1 -P -Jx0.1 -Jz2 -R0/99/0/99 > test2.ps
  (3-d surface)
  horse02:~...rapport% ~/gmt/GMT3.4/bin/grdview test-Bot.grd -Ctest.cpt -B10 -E80/30 -c1 -P -Jx0.1 -Jz2 -Qs -R0/99/0/99 > test2.ps

### 22. aug 2001; Version 0.44 ###
 Reworked the engine-gene design to allow for other
 interesting architectures.

### 21. aug 2001; Version 0.43 ###
 Worked on the rapport.
 Got GMT to be used to display kohonen-maps.

### 20. aug 2001; Version 0.42 ###
 Reworked the transposition-design to avoid global variables.
 Idea: use TD directly on the SOMs (not changing the map).
 Worked on the rapport.

### 19. aug 2001; Version 0.41 ###
 Tried the pure-som engine. (Not good enough, but yet promising as a
 crude estimator)

 Analysing the pure-som Kasparov-net (80x80) (Centered, no turn):

   kohonen_setlookup: min_d=13.662985555847015
   td: evals[0] =0.150936928702
   td: evals[0] =0.150936928702
   td: evals[0] =0.210123400366
   td: evals[0] =0.210123400366
   td: evals[0] =0.295589579525
   td: evals[0] =0.295589579525
   td: evals[0] =0.295589579525
   td: evals[0] =0.295589579525
   td: evals[0] =0.100776965265
   td: evals[0] =0.295589579525
   td: evals[0] =0.415219378428
   td: evals[0] =0.415219378428
   td: evals[0] =0.415219378428
   td: evals[0] =0.415219378428
   td: evals[0] =0.415219378428
   td: evals[0] =0.415219378428
   td: evals[0] =0.415219378428
   td: evals[0] =0.415219378428
   td: evals[0] =0.415219378428
   td: evals[0] =0.309186471664
   td: evals[0] =0.309186471664
   td: evals[0] =0.415219378428
   td: evals[0] =0.309186471664
   td: evals[0] =0.309186471664
   td: evals[0] =0.309186471664
   td: evals[0] =0.724291590494
   td: evals[0] =0.724291590494
   td: evals[0] =0.688871115174
   td: evals[0] =0.688871115174
   td: evals[0] =0.688871115174
   td: evals[0] =0.233775137112
   td: evals[0] =0.691384826325
   td: evals[0] =0.518053016453
   td: evals[0] =0.518053016453
   td: evals[0] =0.617344606947
   td: evals[0] =0.361860146252
   td: evals[0] =0.361860146252
   td: evals[0] =0.361860146252
   
 Morlock played white (and lost). With some good will one
 could say that the evaluations first rise and then decline, but 
 cynics would argue that we're just moving away from familiar
 positions.

 Here the kasparov-net plays black (horriblely):
 
   kohonen_setlookup: min_d=14.710345712752273
   td: evals[0] =-0.220178244973
   td: evals[0] =-0.220178244973
   td: evals[0] =-0.220178244973
   td: evals[0] =-0.220178244973
   td: evals[0] =0.267824497258
   td: evals[0] =0.267824497258
   td: evals[0] =0.267824497258
   td: evals[0] =0.267824497258
   td: evals[0] =0.267824497258
   td: evals[0] =-0.057701096892
   td: evals[0] =-0.057701096892
   td: evals[0] =0.149565813528
   td: evals[0] =0.149565813528
   td: evals[0] =0.520223948812
   td: evals[0] =0.239373857404
   td: evals[0] =0.332381170018
   td: evals[0] =0.369515539305
   td: evals[0] =0.369515539305
   td: evals[0] =0.369515539305
   td: evals[0] =0.369515539305
   td: evals[0] =0.369515539305
   td: evals[0] =0.361860146252
   td: evals[0] =0.361860146252

 Here the cynics seem more right. The net really has the head in the
 sand at the end.
   
 The kohonen-nets can't stand alone unless deeper searches are
 performed, but that seems infeasible - well, in the case of Kasparov,
 who is notoriosly strong when playing white, the openings played as
 white are very nice. A notion of time could be useful as to listen
 more to the net in the opening-fase.

 Idea: Mabye it would be informative to know the distance from the
 model (aka degree of acuracy).

 A positive note: look at rapport/kasparov.pgn which is a game played
 with the kasparov-net as white (and a neuralnet).

### 18. aug 2001; Version 0.40 ###
 Omitted the TURN-bit in the kohoenen-nets and began retrained.
 Tuned the dynamic learningrate-control in TD-learning.
 Worked on the rapport.

 Analyzing the Fischer-net (80x80) (with TURN):

   [snip game]
   kohonen_setlookup: min_d=16.305132090622376
   x=52 y=41  x=41 y=2 td: evals[0] =0.563848202397
   x=52 y=41 td: evals[0] =-0.764447403462
   x=41 y=2 td: evals[0] =0.563848202397
   x=52 y=43 td: evals[0] =-0.771471371505
   x=41 y=3 td: evals[0] =0.575332889481
   x=52 y=41 td: evals[0] =-0.764447403462
   x=42 y=6 td: evals[0] =0.563848202397
   x=34 y=44 td: evals[0] =-0.549933422104
   x=60 y=4 td: evals[0] =0.701131824234
   x=74 y=43 td: evals[0] =-0.411018641811
   x=40 y=3 td: evals[0] =0.645306258322
   x=74 y=43 td: evals[0] =-0.411018641811
   x=40 y=3 td: evals[0] =0.645306258322
   x=74 y=43 td: evals[0] =-0.411018641811
   x=41 y=4 td: evals[0] =0.586917443409
   x=36 y=43 td: evals[0] =-0.383089214381
   x=37 y=4 td: evals[0] =0.463848202397
   x=37 y=42 td: evals[0] =-0.200865512650
   x=37 y=5 td: evals[0] =0.474234354194
   x=39 y=42 td: evals[0] =-0.092310252996
   x=38 y=5 td: evals[0] =0.540446071904
   x=38 y=42 td: evals[0] =-0.103328894807

  We're staying off the edge and the landscape is more diverse (not
  the Grand Canyon, anymore). The TURN-bit still peaks, but taking every
  second eval - it looks smooth. (There is still hope for the engine
  "pure SOM".)

  Idea: move/copy the kohonen-net evals up to the output layer.

### 17. aug 2001; Version 0.39b ###
 Worked on the rapport.

### 16. aug 2001; Version 0.39 ###
 Fixed a bug in neuralnet-crossover.
 Working on Kohonen-nets.
 
 Analysing the Smyslov-net (40x40):
 
   kohonen_setlookup: min_d=5.630950638738109
    x=24 y=0 xboard
   e2e3
   in: e2e3
   rnbqkbnr
   pppppppp
   --------
   --------
   --------
   ----P---
   PPPP-PPP
   RNBQKBNR
   
    x=21 y=0 search_alphabeta: min
    x=24 y=0 b8a6search_alphabeta: leaf p = 1.317475763787 p=1.000000000000 g=33554411
    x=21 y=0  x=24 y=0 a7a6search_alphabeta: leaf p = -0.155487837237 p=0.422256081382 g=14168565
    x=21 y=0  x=24 y=0 b7b6search_alphabeta: leaf p = 0.514005034394 p=0.757002517197 g=25400778
    x=21 y=0  x=24 y=0 b8c6search_alphabeta: leaf p = -0.033366439266 p=0.483316780367 g=16217420
    x=21 y=0  x=24 y=0 c7c6search_alphabeta: leaf p = 0.146446017641 p=0.573223008821 g=19234168
    x=21 y=0  x=24 y=0 d7d6search_alphabeta: leaf p = -0.823391472131 p=0.088304263934 g=2963015
    x=21 y=0  x=24 y=0 e7e6search_alphabeta: leaf p = 1.910160839650 p=1.000000000000 g=33554411
    x=21 y=0  x=24 y=0 g8f6search_alphabeta: leaf p = -0.439669635126 p=0.280165182437 g=9400792
    x=21 y=0  x=24 y=0 f7f6search_alphabeta: leaf p = -0.426340164468 p=0.286829917766 g=9624423
    x=21 y=0  x=24 y=0 g7g6search_alphabeta: leaf p = -0.124591242994 p=0.437704378503 g=14686923
    x=21 y=0  x=24 y=0 g8h6search_alphabeta: leaf p = -0.758458399602 p=0.120770800199 g=4052410
    x=21 y=0  x=24 y=0 h7h6search_alphabeta: leaf p = -0.629842341261 p=0.185078829369 g=6210227
    x=21 y=0  x=24 y=0 a7a5search_alphabeta: leaf p = 0.675280574317 p=0.837640287158 g=28106529
    x=21 y=0  x=24 y=0 b7b5search_alphabeta: leaf p = -0.359912006867 p=0.320043996566 g=10738901
    x=21 y=0  x=24 y=0 c7c5search_alphabeta: leaf p = -0.908281879152 p=0.045859060424 g=1538792
    x=21 y=0  x=24 y=0 d7d5search_alphabeta: leaf p = -1.507818955016 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 e7e5search_alphabeta: leaf p = -1.758751649272 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 f7f5search_alphabeta: leaf p = -1.442217758034 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 g7g5search_alphabeta: leaf p = -0.438424286085 p=0.280787856957 g=9421685
    x=21 y=0  x=24 y=0 h7h5search_alphabeta: leaf p = -0.535817758682 p=0.232091120659 g=7787696
    x=21 y=0 search_alphabeta: min g = 20 i = 0
   move f7f5
    x=24 y=0 rnbqkbnr
   ppppp-pp
   --------
   -----p--
   --------
   ----P---
   PPPP-PPP
   RNBQKBNR
   
   
   f1c4
   in: f1c4
   rnbqkbnr
   ppppp-pp
   --------
   -----p--
   --B-----
   ----P---
   PPPP-PPP
   RNBQK-NR
   
    x=21 y=0 search_alphabeta: min
    x=24 y=0 b8a6search_alphabeta: leaf p = -0.927564447583 p=0.036217776209 g=1215285
    x=21 y=0  x=24 y=0 a7a6search_alphabeta: leaf p = -1.754273682361 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 b7b6search_alphabeta: leaf p = -2.023386781055 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 b8c6search_alphabeta: leaf p = -2.715055744962 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 c7c6search_alphabeta: leaf p = -1.461802997651 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 d7d6search_alphabeta: leaf p = -3.348298774140 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 e7e6search_alphabeta: leaf p = -0.348974565568 p=0.325512717216 g=10922400
    x=21 y=0  x=24 y=0 g8f6search_alphabeta: leaf p = -3.071486675735 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 g7g6search_alphabeta: leaf p = -1.415589751317 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 g8h6search_alphabeta: leaf p = -2.384984860745 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 h7h6search_alphabeta: leaf p = -2.325049757977 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 a7a5search_alphabeta: leaf p = -0.754801912227 p=0.122599043887 g=4113756
    x=21 y=0  x=24 y=0 b7b5search_alphabeta: leaf p = -2.690916821838 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 c7c5search_alphabeta: leaf p = -2.993666852978 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 d7d5search_alphabeta: leaf p = -3.075627531800 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 e7e5search_alphabeta: leaf p = -4.065026674771 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 g7g5search_alphabeta: leaf p = -1.989576424797 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 h7h5search_alphabeta: leaf p = -2.698686040485 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 f5f4search_alphabeta: leaf p = -1.014987905871 p=0.000000000000 g=20
    x=21 y=0 search_alphabeta: min g = 20 i = 0
   move f5f4
    x=24 y=0 rnbqkbnr
   ppppp-pp
   --------
   --------
   --B--p--
   ----P---
   PPPP-PPP
   RNBQK-NR
   
   d1f3
   in: d1f3
   rnbqkbnr
   ppppp-pp
   --------
   --------
   --B--p--
   ----PQ--
   PPPP-PPP
   RNB-K-NR
   
   
    x=21 y=0 search_alphabeta: min
    x=24 y=0 f4e3search_alphabeta: leaf p = -1.195602786625 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 b8a6search_alphabeta: leaf p = -0.084783094640 p=0.457608452680 g=15354792
    x=21 y=0  x=24 y=0 a7a6search_alphabeta: leaf p = -1.690128157534 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 b7b6search_alphabeta: leaf p = -1.051359874360 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 b8c6search_alphabeta: leaf p = -0.108978038802 p=0.445510980599 g=14948869
    x=21 y=0  x=24 y=0 c7c6search_alphabeta: leaf p = -1.112094185964 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 d7d6search_alphabeta: leaf p = -1.473635115922 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 e7e6search_alphabeta: leaf p = 0.042042789521 p=0.521021394761 g=17482575
    x=21 y=0  x=24 y=0 g8f6search_alphabeta: leaf p = -2.513849104764 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 g7g6search_alphabeta: leaf p = -0.887255419808 p=0.056372290096 g=1891557
    x=21 y=0  x=24 y=0 g8h6search_alphabeta: leaf p = -1.246054323515 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 h7h6search_alphabeta: leaf p = -1.721900625299 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 a7a5search_alphabeta: leaf p = -1.275094158085 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 b7b5search_alphabeta: leaf p = -2.446286988728 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 c7c5search_alphabeta: leaf p = -2.097212537206 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 d7d5search_alphabeta: leaf p = -1.985270513002 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 e7e5search_alphabeta: leaf p = -3.712549891345 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 g7g5search_alphabeta: leaf p = -2.032916907579 p=0.000000000000 g=20
    x=21 y=0  x=24 y=0 h7h5search_alphabeta: leaf p = -1.119725861474 p=0.000000000000 g=20
    x=21 y=0 search_alphabeta: min g = 20 i = 0
   move h7h5
    x=24 y=0 rnbqkbnr
   ppppp-p-
   --------
   -------p
   --B--p--
   ----PQ--
   PPPP-PPP
   RNB-K-NR

 The granularity still seems crude (more than the smaller less trained
 nets) and the starting position is on the edge of the map. It might be
 a good idea to set a middle-model as the starting position and
 "center" the map.

 The differences in distance is generally quite large and the smallest
 is above 5 !! I had expected some models close to the starting
 position as it appears quite a few times on the trainingset.

 There is ofcouse the hope that a (deep) search would eliminate the
 granularity-problems.

 Maybe the discrimination on "players" (hopefully playing style) is
 wrong - could focus on, say, certain openings etc.

 Or mabye the nets are not welltrained.


 Analysing the Spassky-net (60x60):

  Clearly a better granularity (as expected), but there still is a
  (rather strong) tendency to stay on the edge of the map. Actually
  during a full 1-ply game, we were never off the edge(!).

  Maybe some randomization should be introduced in the
  training-process.. Do we just move the same single vector around
  most of the time??


 The smaller 2-layer nets seem much better than 3-layer nets, thereby
 indicating that it would be rewarding to limit the nets to these
 "weighted sum of features". It is also more computational feasible.


 Bootstrapping ideas:

   It could be interesting to see if a well-trained "backproped
  2-layer net" (without kohonen-net inputs)'s first layer could be
  used as a intermediate layer acting as a feature extractor for the
  kohonen-nets. That is, using half a net to raise the abstraction
  level for the kohonen-net, which in turn can be used alone or as
  input for other neuralnets.

  Mabye even a cyclic kohonen-net/neuralnet-evaluator could learn to
  play reasonable chess. The features would then change dynamicly with
  the map ...

  Both would, however, upset the incremental update scheme and it is
  then doubtful, whether the loss in searchdepth is compensated for.


 It seems, that (at least) the Spassky-net weights the turn-bit too
 much as the evaluations are flucturating - as the td_learn says:

   [snip game]
   kohonen_setlookup: min_d=13.627974411912405
   td: evals[0] =-0.752154170689
   td: evals[0] =0.491830240624
   td: evals[0] =-0.752154170689
   td: evals[0] =0.484679466552
   td: evals[0] =-0.761056884408
   td: evals[0] =0.491830240624
   td: evals[0] =-0.752154170689
   td: evals[0] =0.491830240624
   td: evals[0] =-0.586220458365
   td: evals[0] =0.491830240624
   td: evals[0] =-0.586220458365
   td: evals[0] =0.484679466552
   td: evals[0] =-0.586220458365
   td: evals[0] =0.508920590654
   td: evals[0] =-0.504916157174
   td: evals[0] =0.508920590654
   td: evals[0] =-0.532768422182
   td: evals[0] =0.508920590654
   td: evals[0] =-0.399799778326
   td: evals[0] =0.468053916836
   td: evals[0] =-0.399799778326
   td: evals[0] =0.468053916836
   td: evals[0] =-0.335764596518
   td: evals[0] =0.468053916836
   td: evals[0] =-0.249955307662
   td: evals[0] =0.436733526404
   td: evals[0] =-0.249955307662
   td: evals[0] =0.436733526404
   td: evals[0] =-0.335764596518
   td: evals[0] =0.436733526404
   td: evals[0] =-0.467910901355
   td: evals[0] =0.392684758125
   td: evals[0] =-0.506131788766
   td: evals[0] =0.599413636526
   td: evals[0] =-0.285494654796
   td: evals[0] =0.599413636526
   td: evals[0] =-0.355107440380
   td: evals[0] =0.537023132754
   td: evals[0] =-0.355107440380
   td: evals[0] =0.537023132754
   td: evals[0] =-0.355107440380
   td: evals[0] =0.537023132754
   td: evals[0] =-0.070649647824
   td: evals[0] =0.429761521685
   td: evals[0] =-0.070649647824
   td: evals[0] =0.429761521685
   td: evals[0] =-0.070649647824   

 The above is supported by the fact that in an earlier version of the
 kohonen-nets the turn bit was almost allways "1.0" or "-1.0" in the models.

 Maybe that bit should be omitted to allow for better generalization
 (and an optimization, actually .. ) 


### 15. aug 2001; Version 0.38 ###
 Analysing the Botvinnik-net (20x20):
 Searches from a game.

  [snip]

  p-ppnppp
  ----p---
  -N----B-
  ---PP---
  --------
  PPP--PPP
  R--QK-NR

   x=17 y=0 search_alphabeta: min
   x=4 y=2 e7c8search_alphabeta: leaf p = -0.083596419915 p=0.458201790042 g=15374702
   x=17 y=0  x=17 y=1 e8d8search_alphabeta: leaf p = -0.425433807927 p=0.287283096037 g=9639629
   x=17 y=0  x=17 y=1 h8g8search_alphabeta: leaf p = -0.148313948031 p=0.425843025985 g=14288923
   x=17 y=0  x=4 y=2 e7g8search_alphabeta: leaf p = -0.079734877460 p=0.460132561270 g=15439487
   x=17 y=0  x=17 y=1 b8a6search_alphabeta: leaf p = -0.560054885205 p=0.219972557398 g=7381065
   x=17 y=0  x=15 y=1 a7a6search_alphabeta: leaf p = -0.376519540171 p=0.311740229915 g=10460273
   x=17 y=0  x=17 y=1 b8c6search_alphabeta: leaf p = -0.513350762747 p=0.243324618626 g=8164629
   x=17 y=0  x=4 y=2 c7c6search_alphabeta: leaf p = -0.855621642266 p=0.072189178867 g=2422283
   x=17 y=0  x=4 y=2 e7c6search_alphabeta: leaf p = -0.239611232308 p=0.380194383846 g=12757211
   x=17 y=0  x=5 y=2 d7d6search_alphabeta: leaf p = 0.126283585337 p=0.563141792669 g=18895899
   x=17 y=0  x=17 y=1 f7f6search_alphabeta: leaf p = -0.583761200951 p=0.208119399525 g=6983339
   x=17 y=0  x=4 y=2 e7g6search_alphabeta: leaf p = -0.388908459946 p=0.305545770027 g=10252422
   x=17 y=0  x=5 y=1 g7g6search_alphabeta: leaf p = -0.454243653221 p=0.272878173389 g=9156280
   x=17 y=0  x=17 y=1 h7h6search_alphabeta: leaf p = -0.659417175646 p=0.170291412177 g=5714044
   x=17 y=0  x=17 y=1 a7a5search_alphabeta: leaf p = -0.580218368831 p=0.209890815585 g=7042778
   x=17 y=0  x=4 y=2 c7c5search_alphabeta: leaf p = -0.086483261795 p=0.456758369102 g=15326268
   x=17 y=0  x=17 y=1 d7d5search_alphabeta: leaf p = -0.426506361157 p=0.286746819422 g=9621634
   x=17 y=0  x=4 y=2 e7d5search_alphabeta: leaf p = -0.091484845005 p=0.454257577498 g=15242356
   x=17 y=0  x=5 y=1 e6e5search_alphabeta: leaf p = -0.393021976118 p=0.303489011941 g=10183408
   x=17 y=0  x=4 y=2 e7f5search_alphabeta: leaf p = -0.253278055980 p=0.373360972010 g=12527920
   x=17 y=0  x=17 y=1 f7f5search_alphabeta: leaf p = -0.388434103204 p=0.305782948398 g=10260380
   x=17 y=0  x=17 y=1 h7h5search_alphabeta: leaf p = -0.454946743301 p=0.272526628350 g=9144485
   x=17 y=0 search_alphabeta: min g = 2422283 i = 0

  [snip]

  Nn-k-b-r
  p--pnppp
  --p-p---
  ------B-
  ---PP---
  --------
  PPP--PPP
  R--QK-NR

   x=4 y=16 search_alphabeta: min
   x=17 y=1 d8c8search_alphabeta: leaf p = -0.706145969024 p=0.146927015488 g=4930066
   x=4 y=16  x=17 y=1 d8e8search_alphabeta: leaf p = -1.136238959928 p=0.000000000000 g=20
   x=4 y=16  x=17 y=1 h8g8search_alphabeta: leaf p = -0.426353237355 p=0.286823381323 g=9624203
   x=4 y=16  x=17 y=1 b8a6search_alphabeta: leaf p = -0.806996268750 p=0.096501865625 g=3238081
   x=4 y=16  x=17 y=1 a7a6search_alphabeta: leaf p = -0.635285785184 p=0.182357107408 g=6118901
   x=4 y=16  x=17 y=1 d7d6search_alphabeta: leaf p = 0.068844312481 p=0.534422156241 g=17932229
   x=4 y=16  x=17 y=1 f7f6search_alphabeta: leaf p = -0.622062996386 p=0.188968501807 g=6340742
   x=4 y=16  x=17 y=1 g7g6search_alphabeta: leaf p = -0.626776931344 p=0.186611534328 g=6261656
   x=4 y=16  x=17 y=1 h7h6search_alphabeta: leaf p = -0.814157560162 p=0.092921219919 g=3117934
   x=4 y=16  x=17 y=1 a7a5search_alphabeta: leaf p = -0.590296938655 p=0.204851530672 g=6873688
   x=4 y=16  x=17 y=1 c6c5search_alphabeta: leaf p = -0.097817722629 p=0.451091138685 g=15136108
   x=4 y=16  x=17 y=1 d7d5search_alphabeta: leaf p = -0.624317356497 p=0.187841321751 g=6302921
   x=4 y=16  x=4 y=6 e6e5search_alphabeta: leaf p = -0.600042503436 p=0.199978748282 g=6710185
   x=4 y=16  x=17 y=1 f7f5search_alphabeta: leaf p = -0.482615972757 p=0.258692013622 g=8680272
   x=4 y=16  x=17 y=1 h7h5search_alphabeta: leaf p = -0.639959380781 p=0.180020309610 g=6040491
   x=4 y=16 search_alphabeta: min g = 20 i = 0
   
   [snip]    

  Nn--kb-r
  p--pnpp-
  --p-p--p
  --------
  ---PP--B
  -----Q--
  PPP--PPP
  R---K-NR

   x=4 y=17 search_alphabeta: min
   x=17 y=1 e7c8search_alphabeta: leaf p = -0.755127503750 p=0.122436248125 g=4108293
   x=4 y=17  x=17 y=1 e8d8search_alphabeta: leaf p = -0.909136197794 p=0.045431901103 g=1524459
   x=4 y=17  x=17 y=1 h8g8search_alphabeta: leaf p = -0.856361211616 p=0.071819394192 g=2409876
   x=4 y=17  x=17 y=1 e7g8search_alphabeta: leaf p = -0.647756913507 p=0.176121543246 g=5909671
   x=4 y=17  x=17 y=1 h8h7search_alphabeta: leaf p = -1.155102217972 p=0.000000000000 g=20
   x=4 y=17  x=17 y=1 b8a6search_alphabeta: leaf p = -1.292471333446 p=0.000000000000 g=20
   x=4 y=17  x=17 y=1 a7a6search_alphabeta: leaf p = -1.093404007370 p=0.000000000000 g=20
   x=4 y=17  x=17 y=2 d7d6search_alphabeta: leaf p = -0.463840833891 p=0.268079583055 g=8995267
   x=4 y=17  x=17 y=1 f7f6search_alphabeta: leaf p = -1.018531123532 p=0.000000000000 g=20
   x=4 y=17  x=17 y=1 e7g6search_alphabeta: leaf p = -1.013285561470 p=0.000000000000 g=20
   x=4 y=17  x=17 y=1 g7g6search_alphabeta: leaf p = -1.073434712001 p=0.000000000000 g=20
   x=4 y=17  x=17 y=1 a7a5search_alphabeta: leaf p = -1.200289822387 p=0.000000000000 g=20
   x=4 y=17  x=17 y=1 c6c5search_alphabeta: leaf p = -0.508263339115 p=0.245868330443 g=8249982
   x=4 y=17  x=17 y=2 d7d5search_alphabeta: leaf p = -1.083958210253 p=0.000000000000 g=20
   x=4 y=17  x=17 y=1 e7d5search_alphabeta: leaf p = -0.665668856500 p=0.167165571750 g=5609158
   x=4 y=17  x=17 y=1 e6e5search_alphabeta: leaf p = -1.047902996493 p=0.000000000000 g=20
   x=4 y=17  x=17 y=1 e7f5search_alphabeta: leaf p = -0.844914378252 p=0.077542810874 g=2601921
   x=4 y=17  x=17 y=1 f7f5search_alphabeta: leaf p = -0.923998268748 p=0.038000865626 g=1275115
   x=4 y=17  x=17 y=1 g7g5search_alphabeta: leaf p = -1.455646690593 p=0.000000000000 g=20
   x=4 y=17  x=17 y=1 h6h5search_alphabeta: leaf p = -0.924279232829 p=0.037860383585 g=1270402
   x=4 y=17 search_alphabeta: min g = 20 i = 0
   [snip]                

 Even the (surposed) well-trained Botvinnik-net does not seem to
 discriminate enough between moves (e.g. the x=17 y=1 state). It would
 appear that we need more models to get a finer map.

 In nn_backprop there might be a problem with the representation, as
 most of the inputs in the raw format is 0.0, all their weights aren't
 updated. This would probably mean that it wouldn't generalize very well!

 The first hidden neurons would then act more like a hashtable than
 (the intended) featureextractors.

 This is specially a problem when _not_ using TDLeaf!

 Mabye a small non-zero value should be used instead, say 0.001?
 Or mabye only when back-proppin'..

### 14. aug 2001; Version 0.37 ###
 Improved the td_learning-scheme and the kohonen-net read and write
 operations. The learningrates are lowered by a factor 100 and the
 neuron weightchanges are now bounded by 0.2. result: there
 are no more convergence problems (flucturation).

### 13. aug 2001; Version 0.36
  Well, after some more experiments, it seems that the (unmodified)
  kohonennets are responsible.. Their input are far too big to let the
  "1.0" etc play any significant part...

 A 1-ply search with kohonen-nets=0 says:

   rnbqkbnr
   pppppppp
   --------
   --------
   --------
   ----P---
   PPPP-PPP
   RNBQKBNR
   
   search_alphabeta: min
   b8a6search_alphabeta: leaf g = 32716156, p*MAX = 32716156.114861059933900833129882812500, p = 0.975017460879043396104748353537
   a7a6search_alphabeta: leaf g = 32786262, p*MAX = 32786262.982636116445064544677734375000, p = 0.977106808416334571276706810750
   b7b6search_alphabeta: leaf g = 32470206, p*MAX = 32470206.679953824728727340698242187500, p = 0.967687596310419451128836954013
   b8c6search_alphabeta: leaf g = 32459223, p*MAX = 32459223.692189011722803115844726562500, p = 0.967360277758517517199265967065
   c7c6search_alphabeta: leaf g = 32535711, p*MAX = 32535711.489965863525867462158203125000, p = 0.969639791834522979385724283929
   d7d6search_alphabeta: leaf g = 32392979, p*MAX = 32392979.295958880335092544555664062500, p = 0.965386040846852089281071584992
   e7e6search_alphabeta: leaf g = 32945051, p*MAX = 32945051.222313757985830307006835937500, p = 0.981839066867614573830280733091
   g8f6search_alphabeta: leaf g = 32749426, p*MAX = 32749426.109559278935194015502929687500, p = 0.976008984016426328622628716403
   f7f6search_alphabeta: leaf g = 32623488, p*MAX = 32623488.292649149894714355468750000000, p = 0.972255744484212813816270681855
   g7g6search_alphabeta: leaf g = 32783778, p*MAX = 32783778.254167687147855758666992187500, p = 0.977032757735265655618661639892
   g8h6search_alphabeta: leaf g = 32602802, p*MAX = 32602802.327530004084110260009765625000, p = 0.971639254664458551502548289136
   h7h6search_alphabeta: leaf g = 32879479, p*MAX = 32879479.180014614015817642211914062500, p = 0.979884867665156145122296038608
   a7a5search_alphabeta: leaf g = 32718110, p*MAX = 32718110.017511337995529174804687500000, p = 0.975075691717476544795317749958
   b7b5search_alphabeta: leaf g = 32767298, p*MAX = 32767298.877743404358625411987304687500, p = 0.976541634031684369077197516162
   c7c5search_alphabeta: leaf g = 32350505, p*MAX = 32350505.876607164740562438964843750000, p = 0.964120234272700549205126208108
   d7d5search_alphabeta: leaf g = 32578145, p*MAX = 32578145.119625978171825408935546875000, p = 0.970904412583422415927714155259
   e7e5search_alphabeta: leaf g = 32890770, p*MAX = 32890770.736875083297491073608398437500, p = 0.980221382292999821039813923562
   f7f5search_alphabeta: leaf g = 32800001, p*MAX = 32800001.235360734164714813232421875000, p = 0.977516240265279279242349730339
   g7g5search_alphabeta: leaf g = 32744894, p*MAX = 32744894.686522930860519409179687500000, p = 0.975873937082197273618078270374
   h7h5search_alphabeta: leaf g = 32923594, p*MAX = 32923594.499345999211072921752929687500, p = 0.981199606673288537983523838193
   search_alphabeta: min g = 32350505 i = 0
   move c7c5
    
 Note that the discrete values are different!

 However, there seems to be convergence problems with backprop (with k=0):

   horse04:~...morlock% ./neuralnet_train ../players/deepblue-B.data brain.e
   .td_learn: i = 2
   .error = -0.499916211604
   error = 0.493619258993
   error = 0.499978094536
   error = 0.499968937032
   error = 0.499946664720
   error = 0.499813364446
   error = -0.499988078376
   error = -0.499985798117
   error = -0.499982440188
   error = -0.499977005024
   error = -0.499966705495
   error = -0.499939754538
   error = -0.499691074393
   td_learn: i = 56
   .error = 0.499759298007
   error = -0.499978477975
   error = -0.499969682506
   error = -0.499948765516
   error = -0.499836016484
   error = 0.499977744821
   error = 0.499968184862
   error = 0.499944275324
   error = 0.499778710341
   error = -0.499933583551
   error = -0.499407033976
   error = -0.446682912772
   error = 0.499969242669
   error = 0.499947362369
   error = 0.499819306232
   error = -0.499829496355
   error = -0.499989858843
   error = -0.499988243758
   error = -0.499986017204
   error = -0.499982751090
   error = -0.499977496397
   error = -0.499967645338
   error = -0.499942506857
   error = -0.499746501891
   error = 0.499950627568
   error = 0.499852153700
   error = -0.499908012233
   error = 0.499824005573
   error = -0.499427145316
   error = -0.499979003812
   error = -0.499970637948
   error = -0.499951220483
   error = -0.499856831256
   error = 0.499951684394
   error = 0.499860467866
   error = -0.499979389326
   [etc]

 TODO: smooth the sigmoid in the output layer or just use a linear
 function. (Choose to use the avaliable dot-product.)

### 12. aug 2001; Version 0.35 ###
 Found that (as expected) the kohonen-nets take up most
 of the time (even with the tricks used). As gprof says:

   Flat profile:

   Each sample counts as 0.01 seconds.
     %   cumulative   self              self     total           
    time   seconds   seconds    calls  ms/call  ms/call  name    
    47.55     23.82    23.82   118469     0.20     0.20  kohonen_unmove
    47.31     47.52    23.70   118495     0.20     0.20  kohonen_move
     1.80     48.42     0.90     9113     0.10     0.10  nn_unmove
     1.48     49.16     0.74     9115     0.08     0.08  nn_move
     0.32     49.32     0.16     7461     0.02     0.02  nn_eval
     0.32     49.48     0.16       13    12.31    22.31  kohonen_setlookup
     0.26     49.61     0.13     5200     0.03     0.03  kohonen_dist
     0.14     49.68     0.07        1    70.00 49744.47  search_alphabeta
     0.10     49.73     0.05     9637     0.01     0.01  board_unmove
     0.10     49.78     0.05     9115     0.01     2.69  eval_move
     0.08     49.82     0.04     9691     0.00     0.01  board_move
     0.08     49.86     0.04       13     3.08     3.08  kohonen_read
    [snip]

   (one 4-ply alpha-beta call). Maybe only one or two (larger) net
   should be used or none at all. Although it is a comfort that
   without the incremental update the above would take
   118469/13*0.16/2s ~ 12 min.

 A problem has been found: it seems that almost every position is 
 being evaluated to the same value - the variations are too small
 for the crude rounding (espc. in the transposition tables), but
 EVEN for the loaded file...

 Loaded from file (8digit precision):

    search_alphabeta: max
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
 >  search_alphabeta: leaf g = 32331605, p*MAX = 32331605.18697373569011688232, p = 0.96355694981010808764
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: leaf g = 32474491, p*MAX = 32474491.76841634139418601990, p = 0.96781530190204512198
    search_alphabeta: max g = 32474491 i = 0

 Only the ">" line stands out!!! (even with p to 20 digits)

  Newly generated (double precition):

    search_alphabeta: max
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54298205584927927703, p = 0.00113205743176082621
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54290699041303014383, p = 0.00113205742952370166
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54294661092717433348, p = 0.00113205743070448521
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54283686845155898482, p = 0.00113205742743390436
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54273504237789893523, p = 0.00113205742439925088
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54282565310859354213, p = 0.00113205742709966109
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54287308246421162039, p = 0.00113205742851316604
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54304098404099931940, p = 0.00113205743351702318
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54280103854398475960, p = 0.00113205742636608990
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54275645330199040473, p = 0.00113205742503734615
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54279085474991006777, p = 0.00113205742606258919
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54290891824348364025, p = 0.00113205742958115549
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54274771947530098259, p = 0.00113205742477705783
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54291246291541028768, p = 0.00113205742968679494
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54296522929507773370, p = 0.00113205743125935582
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54273518991249147803, p = 0.00113205742440364776
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54280452437524218112, p = 0.00113205742646997577
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54283013382519129664, p = 0.00113205742723319685
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54283457686688052490, p = 0.00113205742736560981
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54287750124785816297, p = 0.00113205742864485605
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54278938335482962430, p = 0.00113205742601873820
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54292478792194742709, p = 0.00113205743005410876
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54276784072135342285, p = 0.00113205742537671769
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54273899750842247158, p = 0.00113205742451712296
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54272961529204621911, p = 0.00113205742423751112
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54280043234757613391, p = 0.00113205742634802384
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54281569927843520418, p = 0.00113205742680301384
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54276386947458377108, p = 0.00113205742525836531
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54282996735128108412, p = 0.00113205742722823554
    search_alphabeta: leaf g = 37985, p*MAX = 37985.54277171066496521235, p = 0.00113205742549205100
    search_alphabeta: max g = 37985 i = 0

  Every single position has the same discrete value! But the "p"'s are
  all different! 

  TODO: Redefine the TP-table to store doubles. 

### 11. aug 2001; Version 0.34 ###
 Worked on evolution and schooling:
  storm:~...morlock% ./games_school Alekhine-W africa/no0 psylocke
  storm:~...morlock% ./games_evolve africa psylocke 
  storm:~...morlock% ./train_epoch adam psylocke 
 Has decided to drop the MTDf-search for alhpa-beta. Moveing and
 removeing between known positions are too expensive. 

### 10. aug 2001; Version 0.33 ###
 Retrained the kohonen-nets to ensure >3500 games.
 Fixed some bugs in search.
 Fixed lots of memory leaks.

### 9. aug 2001; Version 0.32 ###
 Worked on genetic algorithms and search.

### 7. aug 2001; Version 0.31 ###
 Worked on genetic algorithms.

### 6. aug 2001; Version 0.30 ###
 Worked on genetic algorithms.

### 4. aug 2001; Version 0.29 ###
 Fixed search, and worked on a genetic algorithm.

### 1. aug 2001; Version 0.28 ###
 Did backprop and a simple td-learning scheme.

### 25. july 2001; Version 0.27 ###
 Finished incremental update for neural networks.
 
### 24. july 2001; Version 0.26 ###
 Finished MTD(f) and fixed some transposition-related bugs in
 board_move/unmove (Had switched the arguments to tp_piecepos ;).
 Worked on the incremental update for the neural network.
 Reading about the Optimal Brain Damage-strategy.

### 22. july 2001; Version 0.25 ###
 Reworked search, evaluation and transposition. Need to work 
 more on the MTD(f)-search. Just a few days more work here and
 all there is left is some neuralnet-incremental update and the
 genetic algorithm.

### 20. july 2001; Version 0.24 ###
 Changed vectorboard and made kohonen_move/unmove (quite nicely).
 Have decided to pass engine* around in search, eval and tp, due to
 their incremental functionality: if more than one engine is to run in
 the same addressspace this has to be done. Retrained the nets.

### 19. july 2001; Version 0.23 ###
 Worked on Kohonen-net training, decided to alternate between black
 and white games and use made moves only. Made prep- and train-scripts:
  psylocke:~...chess% morlock/games_prep Fischer
  psylocke:~...chess% morlock/games_train Fischer moonstar
 where games_train runs kohonen_train on the remote computer ...
 Has trained all nets except Morphy - mabye an error in the file?
 Worked on the incremental update with kohonen-nets.

### 18. july 2001; Version 0.22 ###
 Worked on Kohonen-net training - looks promising if only _made_ moves
 are included. Fixed the _last_ bug in the move_generation. 
 Rearranged the programstructure...

### 16. july 2001; Version 0.21 ###
 Worked on Kohonen-net training - must either shuffle data or use batchmap.

### 15. july 2001; Version 0.20 ###
 Board & move are errorfree. Found a subtle bug in one of the tables;
 board_verify() added. Soon ready to train the kohonen nets...

### 14. july 2001; Version 0.18 ###
 Converted PGN-games to pure long algebraic moves using David Barnes'
 "extract" program (with slightly modified output). The commands were (for Deep Blue)
  nightcrawler:~/chess% extract/extract players/deepblue.pgn -oplayers/deepblue-W.data -Wlalg -C -N -V -w5 -TwDeep
  nightcrawler:~/chess% extract/extract players/deepblue.pgn -oplayers/deepblue-B.data -Wlalg -C -N -V -w5 -TbDeep

### 13. july 2001; Version 0.17 ###
 Fixed bugs in move and board-rutines (incl. promotion).
 Just added neural nets to the engine..

### 12. july 2001; Version 0.16 ###
 Worked on kohonen-nets and neural net incorparation in
 the board. Fixed bugs in board_move/board_unmove.
 Promotion does not yet work.

### 10. july 2001; Version 0.15 ###
 Worked on kohonen-nets.
 Found that drand48() does not work properly in ansi-mode. 

### 9. july 2001; Version 0.14 ###
 Fixed a really-hard-to-track-down bug.

### 6. july 2001; Version 0.14 ###
 Fixed bugs; added Alpha-Beta-search.

### 5. july 2001; Version 0.13b ###
 Has read a lot of articles on Machine Learning applied to games.
 Debugging a bit.

### 25. june 2001; Version 0.13 ###
 Reworked the xboard-interfacing; cleaned it up.

### 22. june 2001; Version 0.12 ###
 Movegeneration finished; worked on the xboard-interfacing (ver 2)
 The skeleton seems to be within reach...
 
### 21. june 2001; Version 0.11 ###
 All movegeneration seems to work;
 just need to work at little bit on castling and en passant.

### 20. june 2001; Version 0.10 ###
 Worked on rotated bitboards in movegeneration.

### 19. june 2001; Version 0.09 ###
 Worked on heap and movegeneration.
 Compiled the lot.

### 14. june 2001; Version 0.08 ###
 Project again in progress after exams..
 Added generic datastructures; fixed bugs.
 Considering evaluating moves instead of positions.

### 21. april 2001; Version 0.07 ###
 Worked on bitboards and movegeneration.

### 26. mar 2001; Version 0.06 ###
 Converted the C++ code to C.
 Worked on xboard-communication.
 Reading about Kohonen-nets for classification.

### 24. mar 2001; Version 0.05 ###
 Project again in progress after dOvs as a project in
 Knowledge Based Systems ..
 Changed the language to C from C++.
 Worked on Neural Nets and the engine genes.
 TODO: Use ideas from classification of art to evaluate positions.

### 15. sep 2000; Version 0.04 ###
 Worked on bitboards in 'board' - skipped the temporary implementation
 of a naive movegenerator.

### 15. july 2000; Version 0.03 ###
 Finished the 'move'-class and apparently conducted a shallow test.
 Worked on 'position' and 'board'.
 Have got info on xboard-interface.

### 9. july 2000; Version 0.021 ###
 Made thoughts on position evaluation.
 Designed the 'position' and 'board' - classes with 
  respect to effiency.
 Partly implemented the 'move'-class.

### 9. july 2000; Version 0.02 ### 
 Designed and prepared implementation of the 'move'-class.
 Furthermore cleaned up the gamecode and made it compile.

### 8. july 2000; Version 0.01b ###
 Project has been named "Morlock"
 ( after H.G.Wells "The time machine" )
 Just started to fill in some code and added a makefile.

### 8. july 2000; Version 0.01 ###
 Project electronicly founded.
 That is still just some sparsely commented files.

### 7. july 2000; Version 0.00 ###
 Project founded.
 Nothing but papersketches and thoughts on fileorganisation.

